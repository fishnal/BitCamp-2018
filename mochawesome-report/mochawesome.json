{
  "stats": {
    "suites": 19,
    "tests": 111,
    "passes": 91,
    "pending": 0,
    "failures": 20,
    "start": "2018-09-11T15:44:22.576Z",
    "end": "2018-09-11T15:44:25.672Z",
    "duration": 3096,
    "testsRegistered": 111,
    "passPercent": 82,
    "pendingPercent": 0,
    "other": 0,
    "hasOther": false,
    "skipped": 0,
    "hasSkipped": false,
    "passPercentClass": "success",
    "pendingPercentClass": "danger"
  },
  "suites": {
    "uuid": "466300e3-8bc0-4b68-8408-ce3eb512d225",
    "title": "",
    "fullFile": "",
    "file": "",
    "beforeHooks": [],
    "afterHooks": [],
    "tests": [],
    "suites": [
      {
        "uuid": "9a4a6121-2487-4a4d-a701-4e3387250649",
        "title": "Mock Server",
        "fullFile": "C:\\Users\\vpxbo\\Documents\\Github\\public-spotify-queue\\test\\mockserver.test.js",
        "file": "\\test\\mockserver.test.js",
        "beforeHooks": [
          {
            "title": "\"before all\" hook",
            "fullTitle": "Mock Server \"before all\" hook",
            "timedOut": false,
            "duration": 10,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "await mockServer.start();\ntempHost = await express().listen(3000);",
            "err": {},
            "isRoot": false,
            "uuid": "d5651756-6946-41e5-bd02-aff5424e8d83",
            "isHook": true,
            "skipped": false
          }
        ],
        "afterHooks": [
          {
            "title": "\"after all\" hook",
            "fullTitle": "Mock Server \"after all\" hook",
            "timedOut": false,
            "duration": 2,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "await tempHost.close();\nawait mockServer.close();",
            "err": {},
            "isRoot": false,
            "uuid": "bb029b60-9d57-45da-b20f-5ff51b93e55a",
            "isHook": true,
            "skipped": false
          }
        ],
        "tests": [],
        "suites": [
          {
            "uuid": "ad2381d2-47f6-4f39-8cf7-93d9afa2463e",
            "title": "/authorize",
            "fullFile": "C:\\Users\\vpxbo\\Documents\\Github\\public-spotify-queue\\test\\mockserver.test.js",
            "file": "\\test\\mockserver.test.js",
            "beforeHooks": [],
            "afterHooks": [
              {
                "title": "\"after all\" hook",
                "fullTitle": "Mock Server /authorize \"after all\" hook",
                "timedOut": false,
                "duration": 0,
                "pass": false,
                "fail": false,
                "pending": false,
                "code": "mockServer.restoreDefaults();",
                "err": {},
                "isRoot": false,
                "uuid": "286a153f-9a73-4dd1-bda1-1a2c6887fe94",
                "isHook": true,
                "skipped": false
              }
            ],
            "tests": [
              {
                "title": "(400) missing client id",
                "fullTitle": "Mock Server /authorize (400) missing client id",
                "timedOut": false,
                "duration": 60,
                "state": "passed",
                "speed": "medium",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "if (_test.func && mockServer[_test.func.name]) {\n\tmockServer[_test.func.name](..._test.func.args);\n}\ntry {\n\tauthHandler(_test, await request({\n\t\turi: `${mockAddress}/authorize`,\n\t\tqs: _test.args.queries,\n\t\tfollowRedirect: false\n\t}));\n} catch (requestErr) {\n\tauthHandler(_test, requestErr);\n}",
                "err": {},
                "isRoot": false,
                "uuid": "1fd90cdf-90ff-4087-a3ea-26b729147e8e",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "(400) wrong client id",
                "fullTitle": "Mock Server /authorize (400) wrong client id",
                "timedOut": false,
                "duration": 10,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "if (_test.func && mockServer[_test.func.name]) {\n\tmockServer[_test.func.name](..._test.func.args);\n}\ntry {\n\tauthHandler(_test, await request({\n\t\turi: `${mockAddress}/authorize`,\n\t\tqs: _test.args.queries,\n\t\tfollowRedirect: false\n\t}));\n} catch (requestErr) {\n\tauthHandler(_test, requestErr);\n}",
                "err": {},
                "isRoot": false,
                "uuid": "9405bb09-5ccb-4af9-b182-408714a2885b",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "(400) missing response type",
                "fullTitle": "Mock Server /authorize (400) missing response type",
                "timedOut": false,
                "duration": 5,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "if (_test.func && mockServer[_test.func.name]) {\n\tmockServer[_test.func.name](..._test.func.args);\n}\ntry {\n\tauthHandler(_test, await request({\n\t\turi: `${mockAddress}/authorize`,\n\t\tqs: _test.args.queries,\n\t\tfollowRedirect: false\n\t}));\n} catch (requestErr) {\n\tauthHandler(_test, requestErr);\n}",
                "err": {},
                "isRoot": false,
                "uuid": "c4f5d9da-b4a2-4c23-b168-84d709e962f4",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "(400) wrong response type",
                "fullTitle": "Mock Server /authorize (400) wrong response type",
                "timedOut": false,
                "duration": 8,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "if (_test.func && mockServer[_test.func.name]) {\n\tmockServer[_test.func.name](..._test.func.args);\n}\ntry {\n\tauthHandler(_test, await request({\n\t\turi: `${mockAddress}/authorize`,\n\t\tqs: _test.args.queries,\n\t\tfollowRedirect: false\n\t}));\n} catch (requestErr) {\n\tauthHandler(_test, requestErr);\n}",
                "err": {},
                "isRoot": false,
                "uuid": "b871e850-d9c0-4df2-a948-6df97b22295c",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "(400) missing redirect uri",
                "fullTitle": "Mock Server /authorize (400) missing redirect uri",
                "timedOut": false,
                "duration": 6,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "if (_test.func && mockServer[_test.func.name]) {\n\tmockServer[_test.func.name](..._test.func.args);\n}\ntry {\n\tauthHandler(_test, await request({\n\t\turi: `${mockAddress}/authorize`,\n\t\tqs: _test.args.queries,\n\t\tfollowRedirect: false\n\t}));\n} catch (requestErr) {\n\tauthHandler(_test, requestErr);\n}",
                "err": {},
                "isRoot": false,
                "uuid": "210b227c-16c8-445e-9a70-599a593bf0fb",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "(400) wrong redirect uri",
                "fullTitle": "Mock Server /authorize (400) wrong redirect uri",
                "timedOut": false,
                "duration": 4,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "if (_test.func && mockServer[_test.func.name]) {\n\tmockServer[_test.func.name](..._test.func.args);\n}\ntry {\n\tauthHandler(_test, await request({\n\t\turi: `${mockAddress}/authorize`,\n\t\tqs: _test.args.queries,\n\t\tfollowRedirect: false\n\t}));\n} catch (requestErr) {\n\tauthHandler(_test, requestErr);\n}",
                "err": {},
                "isRoot": false,
                "uuid": "7cf63df9-be99-4db0-b5c7-ae41a57c5ef1",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "(302) code with no state",
                "fullTitle": "Mock Server /authorize (302) code with no state",
                "timedOut": false,
                "duration": 34,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "if (_test.func && mockServer[_test.func.name]) {\n\tmockServer[_test.func.name](..._test.func.args);\n}\ntry {\n\tauthHandler(_test, await request({\n\t\turi: `${mockAddress}/authorize`,\n\t\tqs: _test.args.queries,\n\t\tfollowRedirect: false\n\t}));\n} catch (requestErr) {\n\tauthHandler(_test, requestErr);\n}",
                "err": {},
                "isRoot": false,
                "uuid": "75b6f11b-5cce-41ae-83c8-57683d485ebb",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "(302) code with state",
                "fullTitle": "Mock Server /authorize (302) code with state",
                "timedOut": false,
                "duration": 6,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "if (_test.func && mockServer[_test.func.name]) {\n\tmockServer[_test.func.name](..._test.func.args);\n}\ntry {\n\tauthHandler(_test, await request({\n\t\turi: `${mockAddress}/authorize`,\n\t\tqs: _test.args.queries,\n\t\tfollowRedirect: false\n\t}));\n} catch (requestErr) {\n\tauthHandler(_test, requestErr);\n}",
                "err": {},
                "isRoot": false,
                "uuid": "47926465-ff53-4875-b273-cc218eb0dc9b",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "(302) token with no state",
                "fullTitle": "Mock Server /authorize (302) token with no state",
                "timedOut": false,
                "duration": 4,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "if (_test.func && mockServer[_test.func.name]) {\n\tmockServer[_test.func.name](..._test.func.args);\n}\ntry {\n\tauthHandler(_test, await request({\n\t\turi: `${mockAddress}/authorize`,\n\t\tqs: _test.args.queries,\n\t\tfollowRedirect: false\n\t}));\n} catch (requestErr) {\n\tauthHandler(_test, requestErr);\n}",
                "err": {},
                "isRoot": false,
                "uuid": "08d90052-87e2-4902-aa26-100ea5e23ae4",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "(302) token with state",
                "fullTitle": "Mock Server /authorize (302) token with state",
                "timedOut": false,
                "duration": 9,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "if (_test.func && mockServer[_test.func.name]) {\n\tmockServer[_test.func.name](..._test.func.args);\n}\ntry {\n\tauthHandler(_test, await request({\n\t\turi: `${mockAddress}/authorize`,\n\t\tqs: _test.args.queries,\n\t\tfollowRedirect: false\n\t}));\n} catch (requestErr) {\n\tauthHandler(_test, requestErr);\n}",
                "err": {},
                "isRoot": false,
                "uuid": "d81f3437-6c98-4a01-9aa2-b4cbb5a5ec8b",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "(302) with redirect http://127.0.0.1:3000",
                "fullTitle": "Mock Server /authorize (302) with redirect http://127.0.0.1:3000",
                "timedOut": false,
                "duration": 6,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "if (_test.func && mockServer[_test.func.name]) {\n\tmockServer[_test.func.name](..._test.func.args);\n}\ntry {\n\tauthHandler(_test, await request({\n\t\turi: `${mockAddress}/authorize`,\n\t\tqs: _test.args.queries,\n\t\tfollowRedirect: false\n\t}));\n} catch (requestErr) {\n\tauthHandler(_test, requestErr);\n}",
                "err": {},
                "isRoot": false,
                "uuid": "9448dbd5-83b5-4371-86f4-a7406d7d32eb",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "(302) with redirect http://127.0.0.1:3000/",
                "fullTitle": "Mock Server /authorize (302) with redirect http://127.0.0.1:3000/",
                "timedOut": false,
                "duration": 5,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "if (_test.func && mockServer[_test.func.name]) {\n\tmockServer[_test.func.name](..._test.func.args);\n}\ntry {\n\tauthHandler(_test, await request({\n\t\turi: `${mockAddress}/authorize`,\n\t\tqs: _test.args.queries,\n\t\tfollowRedirect: false\n\t}));\n} catch (requestErr) {\n\tauthHandler(_test, requestErr);\n}",
                "err": {},
                "isRoot": false,
                "uuid": "d72c1af4-a9c3-4b6e-a722-11f42ccb2351",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "(302) with redirect http://localhost:3000",
                "fullTitle": "Mock Server /authorize (302) with redirect http://localhost:3000",
                "timedOut": false,
                "duration": 6,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "if (_test.func && mockServer[_test.func.name]) {\n\tmockServer[_test.func.name](..._test.func.args);\n}\ntry {\n\tauthHandler(_test, await request({\n\t\turi: `${mockAddress}/authorize`,\n\t\tqs: _test.args.queries,\n\t\tfollowRedirect: false\n\t}));\n} catch (requestErr) {\n\tauthHandler(_test, requestErr);\n}",
                "err": {},
                "isRoot": false,
                "uuid": "d7d5eb3f-9c9b-4f15-b18f-256fc70ecbd1",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "(302) with redirect http://localhost:3000/",
                "fullTitle": "Mock Server /authorize (302) with redirect http://localhost:3000/",
                "timedOut": false,
                "duration": 7,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "if (_test.func && mockServer[_test.func.name]) {\n\tmockServer[_test.func.name](..._test.func.args);\n}\ntry {\n\tauthHandler(_test, await request({\n\t\turi: `${mockAddress}/authorize`,\n\t\tqs: _test.args.queries,\n\t\tfollowRedirect: false\n\t}));\n} catch (requestErr) {\n\tauthHandler(_test, requestErr);\n}",
                "err": {},
                "isRoot": false,
                "uuid": "2128de02-1fdd-4a5b-af22-f9a1ea0e0fcf",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "(302) code with scopes [user-read-email, user-read-private, streaming]",
                "fullTitle": "Mock Server /authorize (302) code with scopes [user-read-email, user-read-private, streaming]",
                "timedOut": false,
                "duration": 5,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "if (_test.func && mockServer[_test.func.name]) {\n\tmockServer[_test.func.name](..._test.func.args);\n}\ntry {\n\tauthHandler(_test, await request({\n\t\turi: `${mockAddress}/authorize`,\n\t\tqs: _test.args.queries,\n\t\tfollowRedirect: false\n\t}));\n} catch (requestErr) {\n\tauthHandler(_test, requestErr);\n}",
                "err": {},
                "isRoot": false,
                "uuid": "94ef11b7-c8ef-45ac-8cf7-a68ce09338f7",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "(302) token with scopes [user-read-email, user-read-private, streaming]",
                "fullTitle": "Mock Server /authorize (302) token with scopes [user-read-email, user-read-private, streaming]",
                "timedOut": false,
                "duration": 5,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "if (_test.func && mockServer[_test.func.name]) {\n\tmockServer[_test.func.name](..._test.func.args);\n}\ntry {\n\tauthHandler(_test, await request({\n\t\turi: `${mockAddress}/authorize`,\n\t\tqs: _test.args.queries,\n\t\tfollowRedirect: false\n\t}));\n} catch (requestErr) {\n\tauthHandler(_test, requestErr);\n}",
                "err": {},
                "isRoot": false,
                "uuid": "d6bf9c50-b993-46b8-906a-d9baa3d2fc34",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "(302) code, but it expires in 1ms",
                "fullTitle": "Mock Server /authorize (302) code, but it expires in 1ms",
                "timedOut": false,
                "duration": 11,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "if (_test.func && mockServer[_test.func.name]) {\n\tmockServer[_test.func.name](..._test.func.args);\n}\ntry {\n\tauthHandler(_test, await request({\n\t\turi: `${mockAddress}/authorize`,\n\t\tqs: _test.args.queries,\n\t\tfollowRedirect: false\n\t}));\n} catch (requestErr) {\n\tauthHandler(_test, requestErr);\n}",
                "err": {},
                "isRoot": false,
                "uuid": "fc1c2e07-f901-4044-81e4-495616d37c60",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "(302) token, but it expires in 1ms",
                "fullTitle": "Mock Server /authorize (302) token, but it expires in 1ms",
                "timedOut": false,
                "duration": 10,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "if (_test.func && mockServer[_test.func.name]) {\n\tmockServer[_test.func.name](..._test.func.args);\n}\ntry {\n\tauthHandler(_test, await request({\n\t\turi: `${mockAddress}/authorize`,\n\t\tqs: _test.args.queries,\n\t\tfollowRedirect: false\n\t}));\n} catch (requestErr) {\n\tauthHandler(_test, requestErr);\n}",
                "err": {},
                "isRoot": false,
                "uuid": "655117be-8799-47cd-9854-bfed17d745fb",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "1fd90cdf-90ff-4087-a3ea-26b729147e8e",
              "9405bb09-5ccb-4af9-b182-408714a2885b",
              "c4f5d9da-b4a2-4c23-b168-84d709e962f4",
              "b871e850-d9c0-4df2-a948-6df97b22295c",
              "210b227c-16c8-445e-9a70-599a593bf0fb",
              "7cf63df9-be99-4db0-b5c7-ae41a57c5ef1",
              "75b6f11b-5cce-41ae-83c8-57683d485ebb",
              "47926465-ff53-4875-b273-cc218eb0dc9b",
              "08d90052-87e2-4902-aa26-100ea5e23ae4",
              "d81f3437-6c98-4a01-9aa2-b4cbb5a5ec8b",
              "9448dbd5-83b5-4371-86f4-a7406d7d32eb",
              "d72c1af4-a9c3-4b6e-a722-11f42ccb2351",
              "d7d5eb3f-9c9b-4f15-b18f-256fc70ecbd1",
              "2128de02-1fdd-4a5b-af22-f9a1ea0e0fcf",
              "94ef11b7-c8ef-45ac-8cf7-a68ce09338f7",
              "d6bf9c50-b993-46b8-906a-d9baa3d2fc34",
              "fc1c2e07-f901-4044-81e4-495616d37c60",
              "655117be-8799-47cd-9854-bfed17d745fb"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 201,
            "root": false,
            "rootEmpty": false,
            "_timeout": 2000
          },
          {
            "uuid": "a213c460-26fa-4799-a764-0e581ce5ce97",
            "title": "/token",
            "fullFile": "C:\\Users\\vpxbo\\Documents\\Github\\public-spotify-queue\\test\\mockserver.test.js",
            "file": "\\test\\mockserver.test.js",
            "beforeHooks": [],
            "afterHooks": [
              {
                "title": "\"after all\" hook",
                "fullTitle": "Mock Server /token \"after all\" hook",
                "timedOut": false,
                "duration": 1,
                "pass": false,
                "fail": false,
                "pending": false,
                "code": "mockServer.restoreDefaults();",
                "err": {},
                "isRoot": false,
                "uuid": "511d8080-887c-40fd-9801-5dffa6d31684",
                "isHook": true,
                "skipped": false
              }
            ],
            "tests": [
              {
                "title": "(400) missing Authorization header",
                "fullTitle": "Mock Server /token (400) missing Authorization header",
                "timedOut": false,
                "duration": 8,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "if (_test.func && mockServer[_test.func.name]) {\n\tmockServer[_test.func.name](..._test.func.args);\n}\ntry {\n\ttokenHandler(_test, await request.post({\n\t\turi: `${mockAddress}/token`,\n\t\theaders: _test.args.headers || {},\n\t\tqs: _test.args.queries || {}\n\t}));\n} catch (err) {\n\ttokenHandler(_test, err);\n}",
                "err": {},
                "isRoot": false,
                "uuid": "79ff11cc-910f-4de1-8e2f-1a2b0c8f70ec",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "(400) wrong Authorization header",
                "fullTitle": "Mock Server /token (400) wrong Authorization header",
                "timedOut": false,
                "duration": 6,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "if (_test.func && mockServer[_test.func.name]) {\n\tmockServer[_test.func.name](..._test.func.args);\n}\ntry {\n\ttokenHandler(_test, await request.post({\n\t\turi: `${mockAddress}/token`,\n\t\theaders: _test.args.headers || {},\n\t\tqs: _test.args.queries || {}\n\t}));\n} catch (err) {\n\ttokenHandler(_test, err);\n}",
                "err": {},
                "isRoot": false,
                "uuid": "fe0be6e0-3e7e-40ac-b8b9-ea8c1edb2ded",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "(415) missing Content-Type header",
                "fullTitle": "Mock Server /token (415) missing Content-Type header",
                "timedOut": false,
                "duration": 8,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "if (_test.func && mockServer[_test.func.name]) {\n\tmockServer[_test.func.name](..._test.func.args);\n}\ntry {\n\ttokenHandler(_test, await request.post({\n\t\turi: `${mockAddress}/token`,\n\t\theaders: _test.args.headers || {},\n\t\tqs: _test.args.queries || {}\n\t}));\n} catch (err) {\n\ttokenHandler(_test, err);\n}",
                "err": {},
                "isRoot": false,
                "uuid": "615722db-29de-4e79-b8ac-a18b1c1a97dc",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "(415) wrong Content-Type header",
                "fullTitle": "Mock Server /token (415) wrong Content-Type header",
                "timedOut": false,
                "duration": 18,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "if (_test.func && mockServer[_test.func.name]) {\n\tmockServer[_test.func.name](..._test.func.args);\n}\ntry {\n\ttokenHandler(_test, await request.post({\n\t\turi: `${mockAddress}/token`,\n\t\theaders: _test.args.headers || {},\n\t\tqs: _test.args.queries || {}\n\t}));\n} catch (err) {\n\ttokenHandler(_test, err);\n}",
                "err": {},
                "isRoot": false,
                "uuid": "ecda080b-7332-41d8-a1e9-5714e8aaf492",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "(400) missing grant type parameter",
                "fullTitle": "Mock Server /token (400) missing grant type parameter",
                "timedOut": false,
                "duration": 108,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "if (_test.func && mockServer[_test.func.name]) {\n\tmockServer[_test.func.name](..._test.func.args);\n}\ntry {\n\ttokenHandler(_test, await request.post({\n\t\turi: `${mockAddress}/token`,\n\t\theaders: _test.args.headers || {},\n\t\tqs: _test.args.queries || {}\n\t}));\n} catch (err) {\n\ttokenHandler(_test, err);\n}",
                "err": {},
                "isRoot": false,
                "uuid": "e7cfd963-ae7e-4b46-abc4-396696311adc",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "(400) wrong grant type parameter",
                "fullTitle": "Mock Server /token (400) wrong grant type parameter",
                "timedOut": false,
                "duration": 4,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "if (_test.func && mockServer[_test.func.name]) {\n\tmockServer[_test.func.name](..._test.func.args);\n}\ntry {\n\ttokenHandler(_test, await request.post({\n\t\turi: `${mockAddress}/token`,\n\t\theaders: _test.args.headers || {},\n\t\tqs: _test.args.queries || {}\n\t}));\n} catch (err) {\n\ttokenHandler(_test, err);\n}",
                "err": {},
                "isRoot": false,
                "uuid": "ead9bfce-0762-4998-8f4e-1daa193a4f85",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "(400) authorization_code: missing code parameter",
                "fullTitle": "Mock Server /token (400) authorization_code: missing code parameter",
                "timedOut": false,
                "duration": 7,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "if (_test.func && mockServer[_test.func.name]) {\n\tmockServer[_test.func.name](..._test.func.args);\n}\ntry {\n\ttokenHandler(_test, await request.post({\n\t\turi: `${mockAddress}/token`,\n\t\theaders: _test.args.headers || {},\n\t\tqs: _test.args.queries || {}\n\t}));\n} catch (err) {\n\ttokenHandler(_test, err);\n}",
                "err": {},
                "isRoot": false,
                "uuid": "cda67912-e37c-42d4-a692-f05a832acedb",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "(400) authorization_code: wrong code parameter",
                "fullTitle": "Mock Server /token (400) authorization_code: wrong code parameter",
                "timedOut": false,
                "duration": 5,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "if (_test.func && mockServer[_test.func.name]) {\n\tmockServer[_test.func.name](..._test.func.args);\n}\ntry {\n\ttokenHandler(_test, await request.post({\n\t\turi: `${mockAddress}/token`,\n\t\theaders: _test.args.headers || {},\n\t\tqs: _test.args.queries || {}\n\t}));\n} catch (err) {\n\ttokenHandler(_test, err);\n}",
                "err": {},
                "isRoot": false,
                "uuid": "5b11ebf5-8535-4015-a436-423d17556e25",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "(400) authorization_code: auth code expired",
                "fullTitle": "Mock Server /token (400) authorization_code: auth code expired",
                "timedOut": false,
                "duration": 8,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "if (_test.func && mockServer[_test.func.name]) {\n\tmockServer[_test.func.name](..._test.func.args);\n}\ntry {\n\ttokenHandler(_test, await request.post({\n\t\turi: `${mockAddress}/token`,\n\t\theaders: _test.args.headers || {},\n\t\tqs: _test.args.queries || {}\n\t}));\n} catch (err) {\n\ttokenHandler(_test, err);\n}",
                "err": {},
                "isRoot": false,
                "uuid": "c88c5c9f-14e7-4832-868f-18d8ff4744e0",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "(400) authorization_code: missing redirect uri",
                "fullTitle": "Mock Server /token (400) authorization_code: missing redirect uri",
                "timedOut": false,
                "duration": 9,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "if (_test.func && mockServer[_test.func.name]) {\n\tmockServer[_test.func.name](..._test.func.args);\n}\ntry {\n\ttokenHandler(_test, await request.post({\n\t\turi: `${mockAddress}/token`,\n\t\theaders: _test.args.headers || {},\n\t\tqs: _test.args.queries || {}\n\t}));\n} catch (err) {\n\ttokenHandler(_test, err);\n}",
                "err": {},
                "isRoot": false,
                "uuid": "591dc8d5-5365-4fd3-95df-5dce0a1cfbb2",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "(400) authorization_code: wrong redirect uri",
                "fullTitle": "Mock Server /token (400) authorization_code: wrong redirect uri",
                "timedOut": false,
                "duration": 7,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "if (_test.func && mockServer[_test.func.name]) {\n\tmockServer[_test.func.name](..._test.func.args);\n}\ntry {\n\ttokenHandler(_test, await request.post({\n\t\turi: `${mockAddress}/token`,\n\t\theaders: _test.args.headers || {},\n\t\tqs: _test.args.queries || {}\n\t}));\n} catch (err) {\n\ttokenHandler(_test, err);\n}",
                "err": {},
                "isRoot": false,
                "uuid": "a772b5bf-e3ba-4c5f-a74e-f4e9f43da3fe",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "(400) refresh_token: missing refresh token",
                "fullTitle": "Mock Server /token (400) refresh_token: missing refresh token",
                "timedOut": false,
                "duration": 5,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "if (_test.func && mockServer[_test.func.name]) {\n\tmockServer[_test.func.name](..._test.func.args);\n}\ntry {\n\ttokenHandler(_test, await request.post({\n\t\turi: `${mockAddress}/token`,\n\t\theaders: _test.args.headers || {},\n\t\tqs: _test.args.queries || {}\n\t}));\n} catch (err) {\n\ttokenHandler(_test, err);\n}",
                "err": {},
                "isRoot": false,
                "uuid": "7d8ac9a2-9b14-4c15-a368-32ed644b968d",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "(400) refresh_token: bad refresh token",
                "fullTitle": "Mock Server /token (400) refresh_token: bad refresh token",
                "timedOut": false,
                "duration": 5,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "if (_test.func && mockServer[_test.func.name]) {\n\tmockServer[_test.func.name](..._test.func.args);\n}\ntry {\n\ttokenHandler(_test, await request.post({\n\t\turi: `${mockAddress}/token`,\n\t\theaders: _test.args.headers || {},\n\t\tqs: _test.args.queries || {}\n\t}));\n} catch (err) {\n\ttokenHandler(_test, err);\n}",
                "err": {},
                "isRoot": false,
                "uuid": "b726c902-06c8-458a-b120-ded0bd0ddd98",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "(200) client_credentials: ok",
                "fullTitle": "Mock Server /token (200) client_credentials: ok",
                "timedOut": false,
                "duration": 9,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "if (_test.func && mockServer[_test.func.name]) {\n\tmockServer[_test.func.name](..._test.func.args);\n}\ntry {\n\ttokenHandler(_test, await request.post({\n\t\turi: `${mockAddress}/token`,\n\t\theaders: _test.args.headers || {},\n\t\tqs: _test.args.queries || {}\n\t}));\n} catch (err) {\n\ttokenHandler(_test, err);\n}",
                "err": {},
                "isRoot": false,
                "uuid": "4431ca6f-4330-4418-b7c0-1c704511dd4a",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "(200) authorization_code: ok, no scopes",
                "fullTitle": "Mock Server /token (200) authorization_code: ok, no scopes",
                "timedOut": false,
                "duration": 4,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "if (_test.func && mockServer[_test.func.name]) {\n\tmockServer[_test.func.name](..._test.func.args);\n}\ntry {\n\ttokenHandler(_test, await request.post({\n\t\turi: `${mockAddress}/token`,\n\t\theaders: _test.args.headers || {},\n\t\tqs: _test.args.queries || {}\n\t}));\n} catch (err) {\n\ttokenHandler(_test, err);\n}",
                "err": {},
                "isRoot": false,
                "uuid": "ea2a54cd-e999-4c31-bbea-e67bee013086",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "(200) authorization_code: ok, with scopes",
                "fullTitle": "Mock Server /token (200) authorization_code: ok, with scopes",
                "timedOut": false,
                "duration": 5,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "if (_test.func && mockServer[_test.func.name]) {\n\tmockServer[_test.func.name](..._test.func.args);\n}\ntry {\n\ttokenHandler(_test, await request.post({\n\t\turi: `${mockAddress}/token`,\n\t\theaders: _test.args.headers || {},\n\t\tqs: _test.args.queries || {}\n\t}));\n} catch (err) {\n\ttokenHandler(_test, err);\n}",
                "err": {},
                "isRoot": false,
                "uuid": "4f6b9995-5b28-495d-907b-90f925b183b4",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "(200) authorization_code: ok but token expires in 1ms",
                "fullTitle": "Mock Server /token (200) authorization_code: ok but token expires in 1ms",
                "timedOut": false,
                "duration": 8,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "if (_test.func && mockServer[_test.func.name]) {\n\tmockServer[_test.func.name](..._test.func.args);\n}\ntry {\n\ttokenHandler(_test, await request.post({\n\t\turi: `${mockAddress}/token`,\n\t\theaders: _test.args.headers || {},\n\t\tqs: _test.args.queries || {}\n\t}));\n} catch (err) {\n\ttokenHandler(_test, err);\n}",
                "err": {},
                "isRoot": false,
                "uuid": "7c6aad19-6c1f-40ce-8529-62f2d6e8da7e",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "(200) refresh_token: ok, new token expires in 60000ms",
                "fullTitle": "Mock Server /token (200) refresh_token: ok, new token expires in 60000ms",
                "timedOut": false,
                "duration": 9,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "if (_test.func && mockServer[_test.func.name]) {\n\tmockServer[_test.func.name](..._test.func.args);\n}\ntry {\n\ttokenHandler(_test, await request.post({\n\t\turi: `${mockAddress}/token`,\n\t\theaders: _test.args.headers || {},\n\t\tqs: _test.args.queries || {}\n\t}));\n} catch (err) {\n\ttokenHandler(_test, err);\n}",
                "err": {},
                "isRoot": false,
                "uuid": "fb929e9e-b220-49e7-93dc-099906141e95",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "(200) refresh_token: generates new refresh token",
                "fullTitle": "Mock Server /token (200) refresh_token: generates new refresh token",
                "timedOut": false,
                "duration": 6,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "if (_test.func && mockServer[_test.func.name]) {\n\tmockServer[_test.func.name](..._test.func.args);\n}\ntry {\n\ttokenHandler(_test, await request.post({\n\t\turi: `${mockAddress}/token`,\n\t\theaders: _test.args.headers || {},\n\t\tqs: _test.args.queries || {}\n\t}));\n} catch (err) {\n\ttokenHandler(_test, err);\n}",
                "err": {},
                "isRoot": false,
                "uuid": "61d7682a-2a09-4928-930e-0b441a2ada5c",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "79ff11cc-910f-4de1-8e2f-1a2b0c8f70ec",
              "fe0be6e0-3e7e-40ac-b8b9-ea8c1edb2ded",
              "615722db-29de-4e79-b8ac-a18b1c1a97dc",
              "ecda080b-7332-41d8-a1e9-5714e8aaf492",
              "e7cfd963-ae7e-4b46-abc4-396696311adc",
              "ead9bfce-0762-4998-8f4e-1daa193a4f85",
              "cda67912-e37c-42d4-a692-f05a832acedb",
              "5b11ebf5-8535-4015-a436-423d17556e25",
              "c88c5c9f-14e7-4832-868f-18d8ff4744e0",
              "591dc8d5-5365-4fd3-95df-5dce0a1cfbb2",
              "a772b5bf-e3ba-4c5f-a74e-f4e9f43da3fe",
              "7d8ac9a2-9b14-4c15-a368-32ed644b968d",
              "b726c902-06c8-458a-b120-ded0bd0ddd98",
              "4431ca6f-4330-4418-b7c0-1c704511dd4a",
              "ea2a54cd-e999-4c31-bbea-e67bee013086",
              "4f6b9995-5b28-495d-907b-90f925b183b4",
              "7c6aad19-6c1f-40ce-8529-62f2d6e8da7e",
              "fb929e9e-b220-49e7-93dc-099906141e95",
              "61d7682a-2a09-4928-930e-0b441a2ada5c"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 239,
            "root": false,
            "rootEmpty": false,
            "_timeout": 2000
          }
        ],
        "passes": [],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 0,
        "root": false,
        "rootEmpty": false,
        "_timeout": 2000
      },
      {
        "uuid": "a86caebe-9e59-4e17-a41d-82c5e40e079f",
        "title": "Host Server",
        "fullFile": "C:\\Users\\vpxbo\\Documents\\Github\\public-spotify-queue\\test\\server.test.js",
        "file": "\\test\\server.test.js",
        "beforeHooks": [
          {
            "title": "\"before all\" hook",
            "fullTitle": "Host Server \"before all\" hook",
            "timedOut": false,
            "duration": 41,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "// save proper implementation of Date.now()\ndateNowImpl = Date.now;\n// override it now so we make it more stable and predictable for testing\nDate.now = () => fakeDateNow++;\nawait hostServer.start();\nawait mockServer.start();\n// after servers start, generate a 1ms auth code on the mock server\nmockServer.setCodeExpiration(1);\nawait request({\n\turi: `${mockAddress}/authorize`,\n\tqs: {\n\t\tclient_id: process.env.CLIENT_ID,\n\t\tredirect_uri: hostServer.getRedirectURI(),\n\t\tresponse_type: 'code',\n\t\tscope: ''\n\t}\n});\n// then generate a 300000ms (5m) auth code\nmockServer.restoreDefaults();\nawait request({\n\turi: `${mockAddress}/authorize`,\n\tqs: {\n\t\tclient_id: process.env.CLIENT_ID,\n\t\tredirect_uri: hostServer.getRedirectURI(),\n\t\tresponse_type: 'code',\n\t\tscope: mainScopes.join(' ')\n\t}\n});",
            "err": {},
            "isRoot": false,
            "uuid": "e5d6ebda-468a-47a3-83be-0d92ecd63d05",
            "isHook": true,
            "skipped": false
          }
        ],
        "afterHooks": [
          {
            "title": "\"after all\" hook",
            "fullTitle": "Host Server \"after all\" hook",
            "timedOut": false,
            "duration": 1,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "Date.now = dateNowImpl;\nawait mockServer.close();\nawait hostServer.close();",
            "err": {},
            "isRoot": false,
            "uuid": "4be4d129-e6a0-4b41-8815-6ab085456728",
            "isHook": true,
            "skipped": false
          }
        ],
        "tests": [],
        "suites": [
          {
            "uuid": "2b107d07-e96a-4493-aaa2-0b6a3ab4caf5",
            "title": "/{root}",
            "fullFile": "C:\\Users\\vpxbo\\Documents\\Github\\public-spotify-queue\\test\\server.test.js",
            "file": "\\test\\server.test.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "(200) ok root/homepage",
                "fullTitle": "Host Server /{root} (200) ok root/homepage",
                "timedOut": false,
                "duration": 6,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "let resp = await request(`${hostAddress}/`);\nresp.should.equal(_test.expected.data);",
                "err": {},
                "isRoot": false,
                "uuid": "6a50570b-87f5-4ac6-94ae-bb47d38da31b",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "6a50570b-87f5-4ac6-94ae-bb47d38da31b"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 6,
            "root": false,
            "rootEmpty": false,
            "_timeout": 2000
          },
          {
            "uuid": "a69c2bf7-a442-42d6-b4e6-a4961f405323",
            "title": "/index.html",
            "fullFile": "C:\\Users\\vpxbo\\Documents\\Github\\public-spotify-queue\\test\\server.test.js",
            "file": "\\test\\server.test.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "(200) static file, but redirect to root",
                "fullTitle": "Host Server /index.html (200) static file, but redirect to root",
                "timedOut": false,
                "duration": 6,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "let resp = await request(`${hostAddress}/index.html`);\nresp.should.equal(_test.expected.data);",
                "err": {},
                "isRoot": false,
                "uuid": "b7ece047-93ef-4c7c-9a07-c8401b8218ed",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "b7ece047-93ef-4c7c-9a07-c8401b8218ed"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 6,
            "root": false,
            "rootEmpty": false,
            "_timeout": 2000
          },
          {
            "uuid": "a070951b-6fa6-471b-89b0-4f0865439160",
            "title": "/token",
            "fullFile": "C:\\Users\\vpxbo\\Documents\\Github\\public-spotify-queue\\test\\server.test.js",
            "file": "\\test\\server.test.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "(400) missing user id",
                "fullTitle": "Host Server /token (400) missing user id",
                "timedOut": false,
                "duration": 11,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "try {\n\thandleRequest(_test, await request({\n\t\turi: `${hostAddress}/token`,\n\t\tqs: _test.args.queries || {}\n\t}));\n} catch (err) {\n\thandleRequest(_test, err);\n}",
                "err": {},
                "isRoot": false,
                "uuid": "704a8429-5b90-46d0-9fd7-5e2f00c6b253",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "(400) missing auth code",
                "fullTitle": "Host Server /token (400) missing auth code",
                "timedOut": false,
                "duration": 17,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "try {\n\thandleRequest(_test, await request({\n\t\turi: `${hostAddress}/token`,\n\t\tqs: _test.args.queries || {}\n\t}));\n} catch (err) {\n\thandleRequest(_test, err);\n}",
                "err": {},
                "isRoot": false,
                "uuid": "e8909622-90c4-4359-a982-11fd8cd63be7",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "(400) wrong auth code",
                "fullTitle": "Host Server /token (400) wrong auth code",
                "timedOut": false,
                "duration": 15,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "try {\n\thandleRequest(_test, await request({\n\t\turi: `${hostAddress}/token`,\n\t\tqs: _test.args.queries || {}\n\t}));\n} catch (err) {\n\thandleRequest(_test, err);\n}",
                "err": {},
                "isRoot": false,
                "uuid": "9f240031-6d6a-43b4-a29d-da383637ba8a",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "(400) expired auth code",
                "fullTitle": "Host Server /token (400) expired auth code",
                "timedOut": false,
                "duration": 14,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "try {\n\thandleRequest(_test, await request({\n\t\turi: `${hostAddress}/token`,\n\t\tqs: _test.args.queries || {}\n\t}));\n} catch (err) {\n\thandleRequest(_test, err);\n}",
                "err": {},
                "isRoot": false,
                "uuid": "05670958-ff37-42e6-a81e-f11c00284f91",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "(200) ok",
                "fullTitle": "Host Server /token (200) ok",
                "timedOut": false,
                "duration": 15,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "try {\n\thandleRequest(_test, await request({\n\t\turi: `${hostAddress}/token`,\n\t\tqs: _test.args.queries || {}\n\t}));\n} catch (err) {\n\thandleRequest(_test, err);\n}",
                "err": {},
                "isRoot": false,
                "uuid": "57cf3830-d448-46bb-9960-40164e338e16",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "704a8429-5b90-46d0-9fd7-5e2f00c6b253",
              "e8909622-90c4-4359-a982-11fd8cd63be7",
              "9f240031-6d6a-43b4-a29d-da383637ba8a",
              "05670958-ff37-42e6-a81e-f11c00284f91",
              "57cf3830-d448-46bb-9960-40164e338e16"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 72,
            "root": false,
            "rootEmpty": false,
            "_timeout": 2000
          },
          {
            "uuid": "eb12ec47-52cf-4360-b6ed-8ff0a16e3b0e",
            "title": "/refresh",
            "fullFile": "C:\\Users\\vpxbo\\Documents\\Github\\public-spotify-queue\\test\\server.test.js",
            "file": "\\test\\server.test.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "(400) missing psq token",
                "fullTitle": "Host Server /refresh (400) missing psq token",
                "timedOut": false,
                "duration": 11,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "try {\n\thandleRequest(_test, await request.post({\n\t\turi: `${hostAddress}/refresh`,\n\t\tqs: _test.args.queries || {}\n\t}));\n} catch (err) {\n\thandleRequest(_test, err);\n}",
                "err": {},
                "isRoot": false,
                "uuid": "74d6fc73-658a-4e79-ac32-6b5ec696b726",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "(400) wrong psq token length",
                "fullTitle": "Host Server /refresh (400) wrong psq token length",
                "timedOut": false,
                "duration": 10,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "try {\n\thandleRequest(_test, await request.post({\n\t\turi: `${hostAddress}/refresh`,\n\t\tqs: _test.args.queries || {}\n\t}));\n} catch (err) {\n\thandleRequest(_test, err);\n}",
                "err": {},
                "isRoot": false,
                "uuid": "986f04a1-b464-4ce2-a68b-573d2b9ad8e0",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "(400) no refresh token in psq token",
                "fullTitle": "Host Server /refresh (400) no refresh token in psq token",
                "timedOut": false,
                "duration": 5,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "try {\n\thandleRequest(_test, await request.post({\n\t\turi: `${hostAddress}/refresh`,\n\t\tqs: _test.args.queries || {}\n\t}));\n} catch (err) {\n\thandleRequest(_test, err);\n}",
                "err": {},
                "isRoot": false,
                "uuid": "91122739-f191-40dd-a753-ec796f278e9f",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "(200) ok",
                "fullTitle": "Host Server /refresh (200) ok",
                "timedOut": false,
                "duration": 8,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "try {\n\thandleRequest(_test, await request.post({\n\t\turi: `${hostAddress}/refresh`,\n\t\tqs: _test.args.queries || {}\n\t}));\n} catch (err) {\n\thandleRequest(_test, err);\n}",
                "err": {},
                "isRoot": false,
                "uuid": "76cbfbce-c7ab-4cdf-8da3-9fc046e94303",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "74d6fc73-658a-4e79-ac32-6b5ec696b726",
              "986f04a1-b464-4ce2-a68b-573d2b9ad8e0",
              "91122739-f191-40dd-a753-ec796f278e9f",
              "76cbfbce-c7ab-4cdf-8da3-9fc046e94303"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 34,
            "root": false,
            "rootEmpty": false,
            "_timeout": 2000
          },
          {
            "uuid": "b672c69b-dcfe-4ee3-9eb6-ee1060e43649",
            "title": "/client_credentials",
            "fullFile": "C:\\Users\\vpxbo\\Documents\\Github\\public-spotify-queue\\test\\server.test.js",
            "file": "\\test\\server.test.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "(200) ok",
                "fullTitle": "Host Server /client_credentials (200) ok",
                "timedOut": false,
                "duration": 14,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "try {\n\thandleRequest(_test, await request(`${hostAddress}/client_credentials`));\n} catch (err) {\n\thandleRequest(_test, err);\n}",
                "err": {},
                "isRoot": false,
                "uuid": "14b437f9-dd09-4365-8ca3-4c18edd5eb95",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "14b437f9-dd09-4365-8ca3-4c18edd5eb95"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 14,
            "root": false,
            "rootEmpty": false,
            "_timeout": 2000
          },
          {
            "uuid": "82ae31a1-9a98-4b2e-b8fe-77a3d38153a3",
            "title": "/queue",
            "fullFile": "C:\\Users\\vpxbo\\Documents\\Github\\public-spotify-queue\\test\\server.test.js",
            "file": "\\test\\server.test.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [],
            "suites": [
              {
                "uuid": "b01cd4ea-e59d-4f9f-b0d4-1342fa4a48de",
                "title": "/add_after",
                "fullFile": "C:\\Users\\vpxbo\\Documents\\Github\\public-spotify-queue\\test\\server.test.js",
                "file": "\\test\\server.test.js",
                "beforeHooks": [],
                "afterHooks": [],
                "tests": [
                  {
                    "title": "(401) missing credentials",
                    "fullTitle": "Host Server /queue /add_after (401) missing credentials",
                    "timedOut": false,
                    "duration": 7,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "if (_test.test_id) {\n\tawait promisify(specialTests[_test.test_id], _test);\n\treturn;\n}\nasync function queueAddAfterRequest(_test) {\n\ttry {\n\t\thandleRequest(_test, await request.post({\n\t\t\turi: `${hostAddress}/queue/add_after`,\n\t\t\theaders: _test.args.headers || {},\n\t\t\tqs: _test.args.queries || {}\n\t\t}));\n\t} catch (err) {\n\t\thandleRequest(_test, err);\n\t}\n}\nif (_test.args.queries instanceof Array) {\n\tlet tmp_test = {\n\t\ttitle: _test.title,\n\t\targs: {\n\t\t\theaders: _test.args.headers\n\t\t},\n\t\texpected: {\n\t\t\tcode: _test.expected.code\n\t\t}\n\t}\n\tfor (let i in _test.args.queries) {\n\t\ttmp_test.args.queries = _test.args.queries[i];\n\t\ttmp_test.expected.data = _test.expected.data[i];\n\t\tawait promisify(queueAddAfterRequest, tmp_test);\n\t}\n} else {\n\tawait promisify(queueAddAfterRequest, _test);\n}",
                    "err": {},
                    "isRoot": false,
                    "uuid": "cbf2e137-75a4-41e5-8b0b-74b0bc3b6e22",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "(401) wrong credentials, bad psq token length",
                    "fullTitle": "Host Server /queue /add_after (401) wrong credentials, bad psq token length",
                    "timedOut": false,
                    "duration": 7,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "if (_test.test_id) {\n\tawait promisify(specialTests[_test.test_id], _test);\n\treturn;\n}\nasync function queueAddAfterRequest(_test) {\n\ttry {\n\t\thandleRequest(_test, await request.post({\n\t\t\turi: `${hostAddress}/queue/add_after`,\n\t\t\theaders: _test.args.headers || {},\n\t\t\tqs: _test.args.queries || {}\n\t\t}));\n\t} catch (err) {\n\t\thandleRequest(_test, err);\n\t}\n}\nif (_test.args.queries instanceof Array) {\n\tlet tmp_test = {\n\t\ttitle: _test.title,\n\t\targs: {\n\t\t\theaders: _test.args.headers\n\t\t},\n\t\texpected: {\n\t\t\tcode: _test.expected.code\n\t\t}\n\t}\n\tfor (let i in _test.args.queries) {\n\t\ttmp_test.args.queries = _test.args.queries[i];\n\t\ttmp_test.expected.data = _test.expected.data[i];\n\t\tawait promisify(queueAddAfterRequest, tmp_test);\n\t}\n} else {\n\tawait promisify(queueAddAfterRequest, _test);\n}",
                    "err": {},
                    "isRoot": false,
                    "uuid": "2de0985e-ec6e-4d2c-add6-c5a780c075bd",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "(400) no relative key",
                    "fullTitle": "Host Server /queue /add_after (400) no relative key",
                    "timedOut": false,
                    "duration": 4,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "if (_test.test_id) {\n\tawait promisify(specialTests[_test.test_id], _test);\n\treturn;\n}\nasync function queueAddAfterRequest(_test) {\n\ttry {\n\t\thandleRequest(_test, await request.post({\n\t\t\turi: `${hostAddress}/queue/add_after`,\n\t\t\theaders: _test.args.headers || {},\n\t\t\tqs: _test.args.queries || {}\n\t\t}));\n\t} catch (err) {\n\t\thandleRequest(_test, err);\n\t}\n}\nif (_test.args.queries instanceof Array) {\n\tlet tmp_test = {\n\t\ttitle: _test.title,\n\t\targs: {\n\t\t\theaders: _test.args.headers\n\t\t},\n\t\texpected: {\n\t\t\tcode: _test.expected.code\n\t\t}\n\t}\n\tfor (let i in _test.args.queries) {\n\t\ttmp_test.args.queries = _test.args.queries[i];\n\t\ttmp_test.expected.data = _test.expected.data[i];\n\t\tawait promisify(queueAddAfterRequest, tmp_test);\n\t}\n} else {\n\tawait promisify(queueAddAfterRequest, _test);\n}",
                    "err": {},
                    "isRoot": false,
                    "uuid": "9b436b61-17f5-47ad-b76d-2efa965ae526",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "(400) wrong relative key type",
                    "fullTitle": "Host Server /queue /add_after (400) wrong relative key type",
                    "timedOut": false,
                    "duration": 8,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "if (_test.test_id) {\n\tawait promisify(specialTests[_test.test_id], _test);\n\treturn;\n}\nasync function queueAddAfterRequest(_test) {\n\ttry {\n\t\thandleRequest(_test, await request.post({\n\t\t\turi: `${hostAddress}/queue/add_after`,\n\t\t\theaders: _test.args.headers || {},\n\t\t\tqs: _test.args.queries || {}\n\t\t}));\n\t} catch (err) {\n\t\thandleRequest(_test, err);\n\t}\n}\nif (_test.args.queries instanceof Array) {\n\tlet tmp_test = {\n\t\ttitle: _test.title,\n\t\targs: {\n\t\t\theaders: _test.args.headers\n\t\t},\n\t\texpected: {\n\t\t\tcode: _test.expected.code\n\t\t}\n\t}\n\tfor (let i in _test.args.queries) {\n\t\ttmp_test.args.queries = _test.args.queries[i];\n\t\ttmp_test.expected.data = _test.expected.data[i];\n\t\tawait promisify(queueAddAfterRequest, tmp_test);\n\t}\n} else {\n\tawait promisify(queueAddAfterRequest, _test);\n}",
                    "err": {},
                    "isRoot": false,
                    "uuid": "18b8bc58-89c8-488a-a3d1-616bdbba50b8",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "(400) no new song id",
                    "fullTitle": "Host Server /queue /add_after (400) no new song id",
                    "timedOut": false,
                    "duration": 4,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "if (_test.test_id) {\n\tawait promisify(specialTests[_test.test_id], _test);\n\treturn;\n}\nasync function queueAddAfterRequest(_test) {\n\ttry {\n\t\thandleRequest(_test, await request.post({\n\t\t\turi: `${hostAddress}/queue/add_after`,\n\t\t\theaders: _test.args.headers || {},\n\t\t\tqs: _test.args.queries || {}\n\t\t}));\n\t} catch (err) {\n\t\thandleRequest(_test, err);\n\t}\n}\nif (_test.args.queries instanceof Array) {\n\tlet tmp_test = {\n\t\ttitle: _test.title,\n\t\targs: {\n\t\t\theaders: _test.args.headers\n\t\t},\n\t\texpected: {\n\t\t\tcode: _test.expected.code\n\t\t}\n\t}\n\tfor (let i in _test.args.queries) {\n\t\ttmp_test.args.queries = _test.args.queries[i];\n\t\ttmp_test.expected.data = _test.expected.data[i];\n\t\tawait promisify(queueAddAfterRequest, tmp_test);\n\t}\n} else {\n\tawait promisify(queueAddAfterRequest, _test);\n}",
                    "err": {},
                    "isRoot": false,
                    "uuid": "868cbfef-cd5d-436a-92b4-8da6e378f0dd",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "(404) couldn't find song",
                    "fullTitle": "Host Server /queue /add_after (404) couldn't find song",
                    "timedOut": false,
                    "duration": 14,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "if (_test.test_id) {\n\tawait promisify(specialTests[_test.test_id], _test);\n\treturn;\n}\nasync function queueAddAfterRequest(_test) {\n\ttry {\n\t\thandleRequest(_test, await request.post({\n\t\t\turi: `${hostAddress}/queue/add_after`,\n\t\t\theaders: _test.args.headers || {},\n\t\t\tqs: _test.args.queries || {}\n\t\t}));\n\t} catch (err) {\n\t\thandleRequest(_test, err);\n\t}\n}\nif (_test.args.queries instanceof Array) {\n\tlet tmp_test = {\n\t\ttitle: _test.title,\n\t\targs: {\n\t\t\theaders: _test.args.headers\n\t\t},\n\t\texpected: {\n\t\t\tcode: _test.expected.code\n\t\t}\n\t}\n\tfor (let i in _test.args.queries) {\n\t\ttmp_test.args.queries = _test.args.queries[i];\n\t\ttmp_test.expected.data = _test.expected.data[i];\n\t\tawait promisify(queueAddAfterRequest, tmp_test);\n\t}\n} else {\n\tawait promisify(queueAddAfterRequest, _test);\n}",
                    "err": {},
                    "isRoot": false,
                    "uuid": "b9d85744-81c3-4df7-9f6d-a0b2ec81add1",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "(404) couldn't find relative key",
                    "fullTitle": "Host Server /queue /add_after (404) couldn't find relative key",
                    "timedOut": false,
                    "duration": 15,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "if (_test.test_id) {\n\tawait promisify(specialTests[_test.test_id], _test);\n\treturn;\n}\nasync function queueAddAfterRequest(_test) {\n\ttry {\n\t\thandleRequest(_test, await request.post({\n\t\t\turi: `${hostAddress}/queue/add_after`,\n\t\t\theaders: _test.args.headers || {},\n\t\t\tqs: _test.args.queries || {}\n\t\t}));\n\t} catch (err) {\n\t\thandleRequest(_test, err);\n\t}\n}\nif (_test.args.queries instanceof Array) {\n\tlet tmp_test = {\n\t\ttitle: _test.title,\n\t\targs: {\n\t\t\theaders: _test.args.headers\n\t\t},\n\t\texpected: {\n\t\t\tcode: _test.expected.code\n\t\t}\n\t}\n\tfor (let i in _test.args.queries) {\n\t\ttmp_test.args.queries = _test.args.queries[i];\n\t\ttmp_test.expected.data = _test.expected.data[i];\n\t\tawait promisify(queueAddAfterRequest, tmp_test);\n\t}\n} else {\n\tawait promisify(queueAddAfterRequest, _test);\n}",
                    "err": {},
                    "isRoot": false,
                    "uuid": "7aaa7227-0d32-470b-b673-1b2c2b053d45",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "(200) ok",
                    "fullTitle": "Host Server /queue /add_after (200) ok",
                    "timedOut": false,
                    "duration": 52,
                    "state": "passed",
                    "speed": "medium",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "if (_test.test_id) {\n\tawait promisify(specialTests[_test.test_id], _test);\n\treturn;\n}\nasync function queueAddAfterRequest(_test) {\n\ttry {\n\t\thandleRequest(_test, await request.post({\n\t\t\turi: `${hostAddress}/queue/add_after`,\n\t\t\theaders: _test.args.headers || {},\n\t\t\tqs: _test.args.queries || {}\n\t\t}));\n\t} catch (err) {\n\t\thandleRequest(_test, err);\n\t}\n}\nif (_test.args.queries instanceof Array) {\n\tlet tmp_test = {\n\t\ttitle: _test.title,\n\t\targs: {\n\t\t\theaders: _test.args.headers\n\t\t},\n\t\texpected: {\n\t\t\tcode: _test.expected.code\n\t\t}\n\t}\n\tfor (let i in _test.args.queries) {\n\t\ttmp_test.args.queries = _test.args.queries[i];\n\t\ttmp_test.expected.data = _test.expected.data[i];\n\t\tawait promisify(queueAddAfterRequest, tmp_test);\n\t}\n} else {\n\tawait promisify(queueAddAfterRequest, _test);\n}",
                    "err": {},
                    "isRoot": false,
                    "uuid": "2af96b13-5b3b-4cf8-a05c-80aa1b3d7e2b",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "(400) too much averaging (too much inserting)",
                    "fullTitle": "Host Server /queue /add_after (400) too much averaging (too much inserting)",
                    "timedOut": false,
                    "duration": 284,
                    "state": "passed",
                    "speed": "slow",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "if (_test.test_id) {\n\tawait promisify(specialTests[_test.test_id], _test);\n\treturn;\n}\nasync function queueAddAfterRequest(_test) {\n\ttry {\n\t\thandleRequest(_test, await request.post({\n\t\t\turi: `${hostAddress}/queue/add_after`,\n\t\t\theaders: _test.args.headers || {},\n\t\t\tqs: _test.args.queries || {}\n\t\t}));\n\t} catch (err) {\n\t\thandleRequest(_test, err);\n\t}\n}\nif (_test.args.queries instanceof Array) {\n\tlet tmp_test = {\n\t\ttitle: _test.title,\n\t\targs: {\n\t\t\theaders: _test.args.headers\n\t\t},\n\t\texpected: {\n\t\t\tcode: _test.expected.code\n\t\t}\n\t}\n\tfor (let i in _test.args.queries) {\n\t\ttmp_test.args.queries = _test.args.queries[i];\n\t\ttmp_test.expected.data = _test.expected.data[i];\n\t\tawait promisify(queueAddAfterRequest, tmp_test);\n\t}\n} else {\n\tawait promisify(queueAddAfterRequest, _test);\n}",
                    "err": {},
                    "isRoot": false,
                    "uuid": "9baead3b-c093-42d6-a594-bc8d8261d6e9",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "(400) unsafe integer (too much appending)",
                    "fullTitle": "Host Server /queue /add_after (400) unsafe integer (too much appending)",
                    "timedOut": false,
                    "duration": 64,
                    "state": "passed",
                    "speed": "medium",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "if (_test.test_id) {\n\tawait promisify(specialTests[_test.test_id], _test);\n\treturn;\n}\nasync function queueAddAfterRequest(_test) {\n\ttry {\n\t\thandleRequest(_test, await request.post({\n\t\t\turi: `${hostAddress}/queue/add_after`,\n\t\t\theaders: _test.args.headers || {},\n\t\t\tqs: _test.args.queries || {}\n\t\t}));\n\t} catch (err) {\n\t\thandleRequest(_test, err);\n\t}\n}\nif (_test.args.queries instanceof Array) {\n\tlet tmp_test = {\n\t\ttitle: _test.title,\n\t\targs: {\n\t\t\theaders: _test.args.headers\n\t\t},\n\t\texpected: {\n\t\t\tcode: _test.expected.code\n\t\t}\n\t}\n\tfor (let i in _test.args.queries) {\n\t\ttmp_test.args.queries = _test.args.queries[i];\n\t\ttmp_test.expected.data = _test.expected.data[i];\n\t\tawait promisify(queueAddAfterRequest, tmp_test);\n\t}\n} else {\n\tawait promisify(queueAddAfterRequest, _test);\n}",
                    "err": {},
                    "isRoot": false,
                    "uuid": "c0200f22-3213-4a8f-a47e-1a0c60c760c0",
                    "isHook": false,
                    "skipped": false
                  }
                ],
                "suites": [],
                "passes": [
                  "cbf2e137-75a4-41e5-8b0b-74b0bc3b6e22",
                  "2de0985e-ec6e-4d2c-add6-c5a780c075bd",
                  "9b436b61-17f5-47ad-b76d-2efa965ae526",
                  "18b8bc58-89c8-488a-a3d1-616bdbba50b8",
                  "868cbfef-cd5d-436a-92b4-8da6e378f0dd",
                  "b9d85744-81c3-4df7-9f6d-a0b2ec81add1",
                  "7aaa7227-0d32-470b-b673-1b2c2b053d45",
                  "2af96b13-5b3b-4cf8-a05c-80aa1b3d7e2b",
                  "9baead3b-c093-42d6-a594-bc8d8261d6e9",
                  "c0200f22-3213-4a8f-a47e-1a0c60c760c0"
                ],
                "failures": [],
                "pending": [],
                "skipped": [],
                "duration": 459,
                "root": false,
                "rootEmpty": false,
                "_timeout": 2000
              },
              {
                "uuid": "244bb1ff-68bf-4d97-8097-860bd5577a63",
                "title": "/remove",
                "fullFile": "C:\\Users\\vpxbo\\Documents\\Github\\public-spotify-queue\\test\\server.test.js",
                "file": "\\test\\server.test.js",
                "beforeHooks": [],
                "afterHooks": [],
                "tests": [
                  {
                    "title": "(401) missing credentials",
                    "fullTitle": "Host Server /queue /remove (401) missing credentials",
                    "timedOut": false,
                    "duration": 5,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "try {\n\thandleRequest(_test, await request.delete({\n\t\turi: `${hostAddress}/queue/remove`,\n\t\theaders: _test.args.headers || {},\n\t\tqs: _test.args.queries || {}\n\t}))\n} catch (err) {\n\thandleRequest(_test, err);\n}",
                    "err": {},
                    "isRoot": false,
                    "uuid": "5f432e29-77d0-4a33-968f-af9167d40051",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "(401) wrong credentials",
                    "fullTitle": "Host Server /queue /remove (401) wrong credentials",
                    "timedOut": false,
                    "duration": 4,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "try {\n\thandleRequest(_test, await request.delete({\n\t\turi: `${hostAddress}/queue/remove`,\n\t\theaders: _test.args.headers || {},\n\t\tqs: _test.args.queries || {}\n\t}))\n} catch (err) {\n\thandleRequest(_test, err);\n}",
                    "err": {},
                    "isRoot": false,
                    "uuid": "871fccd1-846e-47cd-95dc-ebb143e2ad1b",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "(400) missing key",
                    "fullTitle": "Host Server /queue /remove (400) missing key",
                    "timedOut": false,
                    "duration": 4,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "try {\n\thandleRequest(_test, await request.delete({\n\t\turi: `${hostAddress}/queue/remove`,\n\t\theaders: _test.args.headers || {},\n\t\tqs: _test.args.queries || {}\n\t}))\n} catch (err) {\n\thandleRequest(_test, err);\n}",
                    "err": {},
                    "isRoot": false,
                    "uuid": "d1f76f85-9974-47da-9090-9dcbce715f2f",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "(400) wrong key type",
                    "fullTitle": "Host Server /queue /remove (400) wrong key type",
                    "timedOut": false,
                    "duration": 4,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "try {\n\thandleRequest(_test, await request.delete({\n\t\turi: `${hostAddress}/queue/remove`,\n\t\theaders: _test.args.headers || {},\n\t\tqs: _test.args.queries || {}\n\t}))\n} catch (err) {\n\thandleRequest(_test, err);\n}",
                    "err": {},
                    "isRoot": false,
                    "uuid": "5342b1b1-2ad8-434f-bc5a-66a50cf4fe01",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "(404) couldn't find key",
                    "fullTitle": "Host Server /queue /remove (404) couldn't find key",
                    "timedOut": false,
                    "duration": 6,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "try {\n\thandleRequest(_test, await request.delete({\n\t\turi: `${hostAddress}/queue/remove`,\n\t\theaders: _test.args.headers || {},\n\t\tqs: _test.args.queries || {}\n\t}))\n} catch (err) {\n\thandleRequest(_test, err);\n}",
                    "err": {},
                    "isRoot": false,
                    "uuid": "a4ac2c0f-6253-4049-ac55-1a0e7a3088d5",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "(200) ok",
                    "fullTitle": "Host Server /queue /remove (200) ok",
                    "timedOut": false,
                    "duration": 4,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "try {\n\thandleRequest(_test, await request.delete({\n\t\turi: `${hostAddress}/queue/remove`,\n\t\theaders: _test.args.headers || {},\n\t\tqs: _test.args.queries || {}\n\t}))\n} catch (err) {\n\thandleRequest(_test, err);\n}",
                    "err": {},
                    "isRoot": false,
                    "uuid": "f860e387-c200-4b67-a519-c524228befe9",
                    "isHook": false,
                    "skipped": false
                  }
                ],
                "suites": [],
                "passes": [
                  "5f432e29-77d0-4a33-968f-af9167d40051",
                  "871fccd1-846e-47cd-95dc-ebb143e2ad1b",
                  "d1f76f85-9974-47da-9090-9dcbce715f2f",
                  "5342b1b1-2ad8-434f-bc5a-66a50cf4fe01",
                  "a4ac2c0f-6253-4049-ac55-1a0e7a3088d5",
                  "f860e387-c200-4b67-a519-c524228befe9"
                ],
                "failures": [],
                "pending": [],
                "skipped": [],
                "duration": 27,
                "root": false,
                "rootEmpty": false,
                "_timeout": 2000
              }
            ],
            "passes": [],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 0,
            "root": false,
            "rootEmpty": false,
            "_timeout": 2000
          }
        ],
        "passes": [],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 0,
        "root": false,
        "rootEmpty": false,
        "_timeout": 2000
      },
      {
        "uuid": "00fb5be9-d086-4dd9-9a8d-ea4de6e80e44",
        "title": "SkipList",
        "fullFile": "C:\\Users\\vpxbo\\Documents\\Github\\public-spotify-queue\\test\\skiplist.test.js",
        "file": "\\test\\skiplist.test.js",
        "beforeHooks": [],
        "afterHooks": [],
        "tests": [],
        "suites": [
          {
            "uuid": "dc70f1bf-7b9a-405c-a593-dcc749973542",
            "title": "empty",
            "fullFile": "C:\\Users\\vpxbo\\Documents\\Github\\public-spotify-queue\\test\\skiplist.test.js",
            "file": "\\test\\skiplist.test.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "has a size of 0",
                "fullTitle": "SkipList empty has a size of 0",
                "timedOut": false,
                "duration": 1,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "list[_test.func](..._test.args).should.equal(_test.expected);",
                "err": {},
                "isRoot": false,
                "uuid": "4db14835-5280-4f0a-95f0-9c662113ce90",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "has a string of \"[]\"",
                "fullTitle": "SkipList empty has a string of \"[]\"",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "list[_test.func](..._test.args).should.equal(_test.expected);",
                "err": {},
                "isRoot": false,
                "uuid": "80990917-3a52-41ac-a889-e04fcc0f9f20",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "4db14835-5280-4f0a-95f0-9c662113ce90",
              "80990917-3a52-41ac-a889-e04fcc0f9f20"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 1,
            "root": false,
            "rootEmpty": false,
            "_timeout": 2000
          },
          {
            "uuid": "390f3291-4b46-475e-8c50-61e5ead7eb88",
            "title": "addAfter",
            "fullFile": "C:\\Users\\vpxbo\\Documents\\Github\\public-spotify-queue\\test\\skiplist.test.js",
            "file": "\\test\\skiplist.test.js",
            "beforeHooks": [],
            "afterHooks": [
              {
                "title": "\"after all\" hook",
                "fullTitle": "SkipList addAfter \"after all\" hook",
                "timedOut": false,
                "duration": 23,
                "pass": false,
                "fail": false,
                "pending": false,
                "code": "console.log(\"done with addAfter\")",
                "err": {},
                "isRoot": false,
                "uuid": "cd570dc5-55b9-4dbe-9b32-2ee9fa3c14f8",
                "isHook": true,
                "skipped": false
              }
            ],
            "tests": [
              {
                "title": "fails when relative key is not the right type",
                "fullTitle": "SkipList addAfter fails when relative key is not the right type",
                "timedOut": false,
                "duration": 1,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "if (_test.expected.error) {\n\t(() => list.addAfter(..._test.args)).should.throw(_test.expected.error, {\n\t\tmessage: _test.expected.message\n\t});\n} else {\n\tlist.addAfter(..._test.args).should.equal(_test.expected.returned);\n\tgetSubLists(list).should.deepEqual(_test.expected.lists);\n}",
                "err": {},
                "isRoot": false,
                "uuid": "df9d981e-80b7-495f-ae17-c92e1f69cb4c",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "fails when relative key not found",
                "fullTitle": "SkipList addAfter fails when relative key not found",
                "timedOut": false,
                "duration": 1,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "if (_test.expected.error) {\n\t(() => list.addAfter(..._test.args)).should.throw(_test.expected.error, {\n\t\tmessage: _test.expected.message\n\t});\n} else {\n\tlist.addAfter(..._test.args).should.equal(_test.expected.returned);\n\tgetSubLists(list).should.deepEqual(_test.expected.lists);\n}",
                "err": {},
                "isRoot": false,
                "uuid": "092b889f-3c54-4522-b3a0-4a0a68a1f1ae",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "fails adding after positive infinity key",
                "fullTitle": "SkipList addAfter fails adding after positive infinity key",
                "timedOut": false,
                "duration": 1,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "if (_test.expected.error) {\n\t(() => list.addAfter(..._test.args)).should.throw(_test.expected.error, {\n\t\tmessage: _test.expected.message\n\t});\n} else {\n\tlist.addAfter(..._test.args).should.equal(_test.expected.returned);\n\tgetSubLists(list).should.deepEqual(_test.expected.lists);\n}",
                "err": {},
                "isRoot": false,
                "uuid": "b0e84811-1387-4037-8531-667b666b7779",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "add a after null",
                "fullTitle": "SkipList addAfter add a after null",
                "timedOut": false,
                "duration": 1,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "if (_test.expected.error) {\n\t(() => list.addAfter(..._test.args)).should.throw(_test.expected.error, {\n\t\tmessage: _test.expected.message\n\t});\n} else {\n\tlist.addAfter(..._test.args).should.equal(_test.expected.returned);\n\tgetSubLists(list).should.deepEqual(_test.expected.lists);\n}",
                "err": {},
                "isRoot": false,
                "uuid": "bd9b401e-0efb-4463-a4e6-392839071aa6",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "add b after a",
                "fullTitle": "SkipList addAfter add b after a",
                "timedOut": false,
                "duration": 2,
                "state": "failed",
                "pass": false,
                "fail": true,
                "pending": false,
                "code": "if (_test.expected.error) {\n\t(() => list.addAfter(..._test.args)).should.throw(_test.expected.error, {\n\t\tmessage: _test.expected.message\n\t});\n} else {\n\tlist.addAfter(..._test.args).should.equal(_test.expected.returned);\n\tgetSubLists(list).should.deepEqual(_test.expected.lists);\n}",
                "err": {
                  "message": "AssertionError: expected Array [\n  Array [ Object { key: 1, value: 'b' } ],\n  Array [ Object { key: 0, value: 'a' }, Object { key: 1, value: 'b' } ],\n  Array [ Object { key: 0, value: 'a' }, Object { key: 1, value: 'b' } ],\n  Array [ Object { key: 0, value: 'a' }, Object { key: 1, value: 'b' } ]\n] to equal Array [\n  Array [ Object { key: 0, value: 'a' } ],\n  Array [ Object { key: 0, value: 'a' }, Object { key: 1, value: 'b' } ],\n  Array [ Object { key: 0, value: 'a' }, Object { key: 1, value: 'b' } ]\n] (at length, A has 4 and B has 3)",
                  "estack": "AssertionError: expected Array [\n  Array [ Object { key: 1, value: 'b' } ],\n  Array [ Object { key: 0, value: 'a' }, Object { key: 1, value: 'b' } ],\n  Array [ Object { key: 0, value: 'a' }, Object { key: 1, value: 'b' } ],\n  Array [ Object { key: 0, value: 'a' }, Object { key: 1, value: 'b' } ]\n] to equal Array [\n  Array [ Object { key: 0, value: 'a' } ],\n  Array [ Object { key: 0, value: 'a' }, Object { key: 1, value: 'b' } ],\n  Array [ Object { key: 0, value: 'a' }, Object { key: 1, value: 'b' } ]\n] (at length, A has 4 and B has 3)\n    at Assertion.fail (node_modules\\should\\cjs\\should.js:275:17)\n    at Assertion.value (node_modules\\should\\cjs\\should.js:356:19)\n    at Context.<anonymous> (test\\skiplist.test.js:144:32)",
                  "diff": " [\n   [\n     {\n-       \"key\": 1\n-       \"value\": \"b\"\n-     }\n-   ]\n-   [\n-     {\n       \"key\": 0\n       \"value\": \"a\"\n     }\n-     {\n-       \"key\": 1\n-       \"value\": \"b\"\n-     }\n   ]\n   [\n     {\n       \"key\": 0\n"
                },
                "isRoot": false,
                "uuid": "c3761f9a-8340-4415-944f-06e43a0f27ce",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "add c after null",
                "fullTitle": "SkipList addAfter add c after null",
                "timedOut": false,
                "duration": 1,
                "state": "failed",
                "pass": false,
                "fail": true,
                "pending": false,
                "code": "if (_test.expected.error) {\n\t(() => list.addAfter(..._test.args)).should.throw(_test.expected.error, {\n\t\tmessage: _test.expected.message\n\t});\n} else {\n\tlist.addAfter(..._test.args).should.equal(_test.expected.returned);\n\tgetSubLists(list).should.deepEqual(_test.expected.lists);\n}",
                "err": {
                  "message": "AssertionError: expected Array [\n  Array [ Object { key: 1, value: 'b' } ],\n  Array [ Object { key: 0, value: 'a' }, Object { key: 1, value: 'b' } ],\n  Array [ Object { key: 0, value: 'a' }, Object { key: 1, value: 'b' } ],\n  Array [\n    Object { key: -1, value: 'c' },\n    Object { key: 0, value: 'a' },\n    Object { key: 1, value: 'b' }\n  ]\n] to equal Array [\n  Array [ Object { key: 0, value: 'a' } ],\n  Array [ Object { key: 0, value: 'a' }, Object { key: 1, value: 'b' } ],\n  Array [\n    Object { key: -1, value: 'c' },\n    Object { key: 0, value: 'a' },\n    Object { key: 1, value: 'b' }\n  ]\n] (at length, A has 4 and B has 3)",
                  "estack": "AssertionError: expected Array [\n  Array [ Object { key: 1, value: 'b' } ],\n  Array [ Object { key: 0, value: 'a' }, Object { key: 1, value: 'b' } ],\n  Array [ Object { key: 0, value: 'a' }, Object { key: 1, value: 'b' } ],\n  Array [\n    Object { key: -1, value: 'c' },\n    Object { key: 0, value: 'a' },\n    Object { key: 1, value: 'b' }\n  ]\n] to equal Array [\n  Array [ Object { key: 0, value: 'a' } ],\n  Array [ Object { key: 0, value: 'a' }, Object { key: 1, value: 'b' } ],\n  Array [\n    Object { key: -1, value: 'c' },\n    Object { key: 0, value: 'a' },\n    Object { key: 1, value: 'b' }\n  ]\n] (at length, A has 4 and B has 3)\n    at Assertion.fail (node_modules\\should\\cjs\\should.js:275:17)\n    at Assertion.value (node_modules\\should\\cjs\\should.js:356:19)\n    at Context.<anonymous> (test\\skiplist.test.js:144:32)",
                  "diff": " [\n   [\n     {\n-       \"key\": 1\n-       \"value\": \"b\"\n-     }\n-   ]\n-   [\n-     {\n       \"key\": 0\n       \"value\": \"a\"\n     }\n-     {\n-       \"key\": 1\n-       \"value\": \"b\"\n-     }\n   ]\n   [\n     {\n       \"key\": 0\n"
                },
                "isRoot": false,
                "uuid": "89b3904c-d965-4974-b1dc-337441169999",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "add d after a",
                "fullTitle": "SkipList addAfter add d after a",
                "timedOut": false,
                "duration": 1,
                "state": "failed",
                "pass": false,
                "fail": true,
                "pending": false,
                "code": "if (_test.expected.error) {\n\t(() => list.addAfter(..._test.args)).should.throw(_test.expected.error, {\n\t\tmessage: _test.expected.message\n\t});\n} else {\n\tlist.addAfter(..._test.args).should.equal(_test.expected.returned);\n\tgetSubLists(list).should.deepEqual(_test.expected.lists);\n}",
                "err": {
                  "message": "AssertionError: expected Array [\n  Array [ Object { key: 1, value: 'b' } ],\n  Array [ Object { key: 0, value: 'a' }, Object { key: 1, value: 'b' } ],\n  Array [ Object { key: 0, value: 'a' }, Object { key: 1, value: 'b' } ],\n  Array [\n    Object { key: -1, value: 'c' },\n    Object { key: 0, value: 'a' },\n    Object { key: 0.5, value: 'd' },\n    Object { key: 1, value: 'b' }\n  ]\n] to equal Array [\n  Array [ Object { key: 0, value: 'a' } ],\n  Array [ Object { key: 0, value: 'a' }, Object { key: 1, value: 'b' } ],\n  Array [\n    Object { key: -1, value: 'c' },\n    Object { key: 0, value: 'a' },\n    Object { key: 0.5, value: 'd' },\n    Object { key: 1, value: 'b' }\n  ]\n] (at length, A has 4 and B has 3)",
                  "estack": "AssertionError: expected Array [\n  Array [ Object { key: 1, value: 'b' } ],\n  Array [ Object { key: 0, value: 'a' }, Object { key: 1, value: 'b' } ],\n  Array [ Object { key: 0, value: 'a' }, Object { key: 1, value: 'b' } ],\n  Array [\n    Object { key: -1, value: 'c' },\n    Object { key: 0, value: 'a' },\n    Object { key: 0.5, value: 'd' },\n    Object { key: 1, value: 'b' }\n  ]\n] to equal Array [\n  Array [ Object { key: 0, value: 'a' } ],\n  Array [ Object { key: 0, value: 'a' }, Object { key: 1, value: 'b' } ],\n  Array [\n    Object { key: -1, value: 'c' },\n    Object { key: 0, value: 'a' },\n    Object { key: 0.5, value: 'd' },\n    Object { key: 1, value: 'b' }\n  ]\n] (at length, A has 4 and B has 3)\n    at Assertion.fail (node_modules\\should\\cjs\\should.js:275:17)\n    at Assertion.value (node_modules\\should\\cjs\\should.js:356:19)\n    at Context.<anonymous> (test\\skiplist.test.js:144:32)",
                  "diff": " [\n   [\n     {\n-       \"key\": 1\n-       \"value\": \"b\"\n-     }\n-   ]\n-   [\n-     {\n       \"key\": 0\n       \"value\": \"a\"\n     }\n-     {\n-       \"key\": 1\n-       \"value\": \"b\"\n-     }\n   ]\n   [\n     {\n       \"key\": 0\n"
                },
                "isRoot": false,
                "uuid": "1c4aab6d-cfa1-4430-84c8-f2a1cda1cbb4",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "add e after -Infinity",
                "fullTitle": "SkipList addAfter add e after -Infinity",
                "timedOut": false,
                "duration": 0,
                "state": "failed",
                "pass": false,
                "fail": true,
                "pending": false,
                "code": "if (_test.expected.error) {\n\t(() => list.addAfter(..._test.args)).should.throw(_test.expected.error, {\n\t\tmessage: _test.expected.message\n\t});\n} else {\n\tlist.addAfter(..._test.args).should.equal(_test.expected.returned);\n\tgetSubLists(list).should.deepEqual(_test.expected.lists);\n}",
                "err": {
                  "message": "AssertionError: expected Array [\n  Array [ Object { key: 1, value: 'b' } ],\n  Array [\n    Object { key: -2, value: 'e' },\n    Object { key: 0, value: 'a' },\n    Object { key: 1, value: 'b' }\n  ],\n  Array [\n    Object { key: -2, value: 'e' },\n    Object { key: 0, value: 'a' },\n    Object { key: 1, value: 'b' }\n  ],\n  Array [\n    Object { key: -2, value: 'e' },\n    Object { key: -1, value: 'c' },\n    Object { key: 0, value: 'a' },\n    Object { key: 0.5, value: 'd' },\n    Object { key: 1, value: 'b' }\n  ]\n] to equal Array [\n  Array [ Object { key: -2, value: 'e' } ],\n  Array [ Object { key: -2, value: 'e' }, Object { key: 0, value: 'a' } ],\n  Array [\n    Object { key: -2, value: 'e' },\n    Object { key: 0, value: 'a' },\n    Object { key: 1, value: 'b' }\n  ],\n  Array [\n    Object { key: -2, value: 'e' },\n    Object { key: -1, value: 'c' },\n    Object { key: 0, value: 'a' },\n    Object { key: 0.5, value: 'd' },\n    Object { key: 1, value: 'b' }\n  ]\n] (at '0' -> '0' -> key, A has 1 and B has -2)",
                  "estack": "AssertionError: expected Array [\n  Array [ Object { key: 1, value: 'b' } ],\n  Array [\n    Object { key: -2, value: 'e' },\n    Object { key: 0, value: 'a' },\n    Object { key: 1, value: 'b' }\n  ],\n  Array [\n    Object { key: -2, value: 'e' },\n    Object { key: 0, value: 'a' },\n    Object { key: 1, value: 'b' }\n  ],\n  Array [\n    Object { key: -2, value: 'e' },\n    Object { key: -1, value: 'c' },\n    Object { key: 0, value: 'a' },\n    Object { key: 0.5, value: 'd' },\n    Object { key: 1, value: 'b' }\n  ]\n] to equal Array [\n  Array [ Object { key: -2, value: 'e' } ],\n  Array [ Object { key: -2, value: 'e' }, Object { key: 0, value: 'a' } ],\n  Array [\n    Object { key: -2, value: 'e' },\n    Object { key: 0, value: 'a' },\n    Object { key: 1, value: 'b' }\n  ],\n  Array [\n    Object { key: -2, value: 'e' },\n    Object { key: -1, value: 'c' },\n    Object { key: 0, value: 'a' },\n    Object { key: 0.5, value: 'd' },\n    Object { key: 1, value: 'b' }\n  ]\n] (at '0' -> '0' -> key, A has 1 and B has -2)\n    at Assertion.fail (node_modules\\should\\cjs\\should.js:275:17)\n    at Assertion.value (node_modules\\should\\cjs\\should.js:356:19)\n    at Context.<anonymous> (test\\skiplist.test.js:144:32)",
                  "diff": " [\n   [\n     {\n-       \"key\": 1\n-       \"value\": \"b\"\n+       \"key\": -2\n+       \"value\": \"e\"\n     }\n   ]\n   [\n     {\n     {\n       \"key\": 0\n       \"value\": \"a\"\n     }\n-     {\n-       \"key\": 1\n-       \"value\": \"b\"\n-     }\n   ]\n   [\n     {\n       \"key\": -2\n"
                },
                "isRoot": false,
                "uuid": "ee55045d-ef71-467b-a862-9d0b26e1f417",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "add f after b",
                "fullTitle": "SkipList addAfter add f after b",
                "timedOut": false,
                "duration": 1,
                "state": "failed",
                "pass": false,
                "fail": true,
                "pending": false,
                "code": "if (_test.expected.error) {\n\t(() => list.addAfter(..._test.args)).should.throw(_test.expected.error, {\n\t\tmessage: _test.expected.message\n\t});\n} else {\n\tlist.addAfter(..._test.args).should.equal(_test.expected.returned);\n\tgetSubLists(list).should.deepEqual(_test.expected.lists);\n}",
                "err": {
                  "message": "AssertionError: expected Array [\n  Array [ Object { key: 1, value: 'b' } ],\n  Array [\n    Object { key: -2, value: 'e' },\n    Object { key: 0, value: 'a' },\n    Object { key: 1, value: 'b' }\n  ],\n  Array [\n    Object { key: -2, value: 'e' },\n    Object { key: 0, value: 'a' },\n    Object { key: 1, value: 'b' }\n  ],\n  Array [\n    Object { key: -2, value: 'e' },\n    Object { key: -1, value: 'c' },\n    Object { key: 0, value: 'a' },\n    Object { key: 0.5, value: 'd' },\n    Object { key: 1, value: 'b' },\n    Object { key: 2, value: 'f' }\n  ]\n] to equal Array [\n  Array [ Object { key: -2, value: 'e' } ],\n  Array [ Object { key: -2, value: 'e' }, Object { key: 0, value: 'a' } ],\n  Array [\n    Object { key: -2, value: 'e' },\n    Object { key: 0, value: 'a' },\n    Object { key: 1, value: 'b' }\n  ],\n  Array [\n    Object { key: -2, value: 'e' },\n    Object { key: -1, value: 'c' },\n    Object { key: 0, value: 'a' },\n    Object { key: 0.5, value: 'd' },\n    Object { key: 1, value: 'b' },\n    Object { key: 2, value: 'f' }\n  ]\n] (at '0' -> '0' -> key, A has 1 and B has -2)",
                  "estack": "AssertionError: expected Array [\n  Array [ Object { key: 1, value: 'b' } ],\n  Array [\n    Object { key: -2, value: 'e' },\n    Object { key: 0, value: 'a' },\n    Object { key: 1, value: 'b' }\n  ],\n  Array [\n    Object { key: -2, value: 'e' },\n    Object { key: 0, value: 'a' },\n    Object { key: 1, value: 'b' }\n  ],\n  Array [\n    Object { key: -2, value: 'e' },\n    Object { key: -1, value: 'c' },\n    Object { key: 0, value: 'a' },\n    Object { key: 0.5, value: 'd' },\n    Object { key: 1, value: 'b' },\n    Object { key: 2, value: 'f' }\n  ]\n] to equal Array [\n  Array [ Object { key: -2, value: 'e' } ],\n  Array [ Object { key: -2, value: 'e' }, Object { key: 0, value: 'a' } ],\n  Array [\n    Object { key: -2, value: 'e' },\n    Object { key: 0, value: 'a' },\n    Object { key: 1, value: 'b' }\n  ],\n  Array [\n    Object { key: -2, value: 'e' },\n    Object { key: -1, value: 'c' },\n    Object { key: 0, value: 'a' },\n    Object { key: 0.5, value: 'd' },\n    Object { key: 1, value: 'b' },\n    Object { key: 2, value: 'f' }\n  ]\n] (at '0' -> '0' -> key, A has 1 and B has -2)\n    at Assertion.fail (node_modules\\should\\cjs\\should.js:275:17)\n    at Assertion.value (node_modules\\should\\cjs\\should.js:356:19)\n    at Context.<anonymous> (test\\skiplist.test.js:144:32)",
                  "diff": " [\n   [\n     {\n-       \"key\": 1\n-       \"value\": \"b\"\n+       \"key\": -2\n+       \"value\": \"e\"\n     }\n   ]\n   [\n     {\n     {\n       \"key\": 0\n       \"value\": \"a\"\n     }\n-     {\n-       \"key\": 1\n-       \"value\": \"b\"\n-     }\n   ]\n   [\n     {\n       \"key\": -2\n"
                },
                "isRoot": false,
                "uuid": "e1a264d5-92a4-4548-aabc-f54ccf1f874a",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "add g after f",
                "fullTitle": "SkipList addAfter add g after f",
                "timedOut": false,
                "duration": 1,
                "state": "failed",
                "pass": false,
                "fail": true,
                "pending": false,
                "code": "if (_test.expected.error) {\n\t(() => list.addAfter(..._test.args)).should.throw(_test.expected.error, {\n\t\tmessage: _test.expected.message\n\t});\n} else {\n\tlist.addAfter(..._test.args).should.equal(_test.expected.returned);\n\tgetSubLists(list).should.deepEqual(_test.expected.lists);\n}",
                "err": {
                  "message": "AssertionError: expected Array [\n  Array [ Object { key: 1, value: 'b' } ],\n  Array [\n    Object { key: -2, value: 'e' },\n    Object { key: 0, value: 'a' },\n    Object { key: 1, value: 'b' }\n  ],\n  Array [\n    Object { key: -2, value: 'e' },\n    Object { key: 0, value: 'a' },\n    Object { key: 1, value: 'b' }\n  ],\n  Array [\n    Object { key: -2, value: 'e' },\n    Object { key: -1, value: 'c' },\n    Object { key: 0, value: 'a' },\n    Object { key: 0.5, value: 'd' },\n    Object { key: 1, value: 'b' },\n    Object { key: 2, value: 'f' },\n    Object { key: 3, value: 'g' }\n  ]\n] to equal Array [\n  Array [ Object { key: -2, value: 'e' } ],\n  Array [\n    Object { key: -2, value: 'e' },\n    Object { key: 0, value: 'a' },\n    Object { key: 3, value: 'g' }\n  ],\n  Array [\n    Object { key: -2, value: 'e' },\n    Object { key: 0, value: 'a' },\n    Object { key: 1, value: 'b' },\n    Object { key: 3, value: 'g' }\n  ],\n  Array [\n    Object { key: -2, value: 'e' },\n    Object { key: -1, value: 'c' },\n    Object { key: 0, value: 'a' },\n    Object { key: 0.5, value: 'd' },\n    Object { key: 1, value: 'b' },\n    Object { key: 2, value: 'f' },\n    Object { key: 3, value: 'g' }\n  ]\n] (at '0' -> '0' -> key, A has 1 and B has -2)",
                  "estack": "AssertionError: expected Array [\n  Array [ Object { key: 1, value: 'b' } ],\n  Array [\n    Object { key: -2, value: 'e' },\n    Object { key: 0, value: 'a' },\n    Object { key: 1, value: 'b' }\n  ],\n  Array [\n    Object { key: -2, value: 'e' },\n    Object { key: 0, value: 'a' },\n    Object { key: 1, value: 'b' }\n  ],\n  Array [\n    Object { key: -2, value: 'e' },\n    Object { key: -1, value: 'c' },\n    Object { key: 0, value: 'a' },\n    Object { key: 0.5, value: 'd' },\n    Object { key: 1, value: 'b' },\n    Object { key: 2, value: 'f' },\n    Object { key: 3, value: 'g' }\n  ]\n] to equal Array [\n  Array [ Object { key: -2, value: 'e' } ],\n  Array [\n    Object { key: -2, value: 'e' },\n    Object { key: 0, value: 'a' },\n    Object { key: 3, value: 'g' }\n  ],\n  Array [\n    Object { key: -2, value: 'e' },\n    Object { key: 0, value: 'a' },\n    Object { key: 1, value: 'b' },\n    Object { key: 3, value: 'g' }\n  ],\n  Array [\n    Object { key: -2, value: 'e' },\n    Object { key: -1, value: 'c' },\n    Object { key: 0, value: 'a' },\n    Object { key: 0.5, value: 'd' },\n    Object { key: 1, value: 'b' },\n    Object { key: 2, value: 'f' },\n    Object { key: 3, value: 'g' }\n  ]\n] (at '0' -> '0' -> key, A has 1 and B has -2)\n    at Assertion.fail (node_modules\\should\\cjs\\should.js:275:17)\n    at Assertion.value (node_modules\\should\\cjs\\should.js:356:19)\n    at Context.<anonymous> (test\\skiplist.test.js:144:32)",
                  "diff": " [\n   [\n     {\n-       \"key\": 1\n-       \"value\": \"b\"\n+       \"key\": -2\n+       \"value\": \"e\"\n     }\n   ]\n   [\n     {\n       \"key\": 0\n       \"value\": \"a\"\n     }\n     {\n-       \"key\": 1\n-       \"value\": \"b\"\n+       \"key\": 3\n+       \"value\": \"g\"\n     }\n   ]\n   [\n     {\n     {\n       \"key\": 1\n       \"value\": \"b\"\n     }\n+     {\n+       \"key\": 3\n+       \"value\": \"g\"\n+     }\n   ]\n   [\n     {\n       \"key\": -2\n"
                },
                "isRoot": false,
                "uuid": "b0cc75a7-cee2-4b22-97de-8fdc077ebeec",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "add h after f",
                "fullTitle": "SkipList addAfter add h after f",
                "timedOut": false,
                "duration": 1,
                "state": "failed",
                "pass": false,
                "fail": true,
                "pending": false,
                "code": "if (_test.expected.error) {\n\t(() => list.addAfter(..._test.args)).should.throw(_test.expected.error, {\n\t\tmessage: _test.expected.message\n\t});\n} else {\n\tlist.addAfter(..._test.args).should.equal(_test.expected.returned);\n\tgetSubLists(list).should.deepEqual(_test.expected.lists);\n}",
                "err": {
                  "message": "AssertionError: expected Array [\n  Array [ Object { key: 1, value: 'b' } ],\n  Array [\n    Object { key: -2, value: 'e' },\n    Object { key: 0, value: 'a' },\n    Object { key: 1, value: 'b' }\n  ],\n  Array [\n    Object { key: -2, value: 'e' },\n    Object { key: 0, value: 'a' },\n    Object { key: 1, value: 'b' }\n  ],\n  Array [\n    Object { key: -2, value: 'e' },\n    Object { key: -1, value: 'c' },\n    Object { key: 0, value: 'a' },\n    Object { key: 0.5, value: 'd' },\n    Object { key: 1, value: 'b' },\n    Object { key: 2, value: 'f' },\n    Object { key: 2.5, value: 'h' },\n    Object { key: 3, value: 'g' }\n  ]\n] to equal Array [\n  Array [\n    Object { key: -2, value: 'e' },\n    Object { key: 2.5, value: 'h' }\n  ],\n  Array [\n    Object { key: -2, value: 'e' },\n    Object { key: 0, value: 'a' },\n    Object { key: 2.5, value: 'h' },\n    Object { key: 3, value: 'g' }\n  ],\n  Array [\n    Object { key: -2, value: 'e' },\n    Object { key: 0, value: 'a' },\n    Object { key: 1, value: 'b' },\n    Object { key: 2.5, value: 'h' },\n    Object { key: 3, value: 'g' }\n  ],\n  Array [\n    Object { key: -2, value: 'e' },\n    Object { key: -1, value: 'c' },\n    Object { key: 0, value: 'a' },\n    Object { key: 0.5, value: 'd' },\n    Object { key: 1, value: 'b' },\n    Object { key: 2, value: 'f' },\n    Object { key: 2.5, value: 'h' },\n    Object { key: 3, value: 'g' }\n  ]\n] (at '0' -> length, A has 1 and B has 2)",
                  "estack": "AssertionError: expected Array [\n  Array [ Object { key: 1, value: 'b' } ],\n  Array [\n    Object { key: -2, value: 'e' },\n    Object { key: 0, value: 'a' },\n    Object { key: 1, value: 'b' }\n  ],\n  Array [\n    Object { key: -2, value: 'e' },\n    Object { key: 0, value: 'a' },\n    Object { key: 1, value: 'b' }\n  ],\n  Array [\n    Object { key: -2, value: 'e' },\n    Object { key: -1, value: 'c' },\n    Object { key: 0, value: 'a' },\n    Object { key: 0.5, value: 'd' },\n    Object { key: 1, value: 'b' },\n    Object { key: 2, value: 'f' },\n    Object { key: 2.5, value: 'h' },\n    Object { key: 3, value: 'g' }\n  ]\n] to equal Array [\n  Array [\n    Object { key: -2, value: 'e' },\n    Object { key: 2.5, value: 'h' }\n  ],\n  Array [\n    Object { key: -2, value: 'e' },\n    Object { key: 0, value: 'a' },\n    Object { key: 2.5, value: 'h' },\n    Object { key: 3, value: 'g' }\n  ],\n  Array [\n    Object { key: -2, value: 'e' },\n    Object { key: 0, value: 'a' },\n    Object { key: 1, value: 'b' },\n    Object { key: 2.5, value: 'h' },\n    Object { key: 3, value: 'g' }\n  ],\n  Array [\n    Object { key: -2, value: 'e' },\n    Object { key: -1, value: 'c' },\n    Object { key: 0, value: 'a' },\n    Object { key: 0.5, value: 'd' },\n    Object { key: 1, value: 'b' },\n    Object { key: 2, value: 'f' },\n    Object { key: 2.5, value: 'h' },\n    Object { key: 3, value: 'g' }\n  ]\n] (at '0' -> length, A has 1 and B has 2)\n    at Assertion.fail (node_modules\\should\\cjs\\should.js:275:17)\n    at Assertion.value (node_modules\\should\\cjs\\should.js:356:19)\n    at Context.<anonymous> (test\\skiplist.test.js:144:32)",
                  "diff": " [\n   [\n     {\n-       \"key\": 1\n-       \"value\": \"b\"\n+       \"key\": -2\n+       \"value\": \"e\"\n     }\n+     {\n+       \"key\": 2.5\n+       \"value\": \"h\"\n+     }\n   ]\n   [\n     {\n       \"key\": -2\n       \"key\": 0\n       \"value\": \"a\"\n     }\n     {\n-       \"key\": 1\n-       \"value\": \"b\"\n+       \"key\": 2.5\n+       \"value\": \"h\"\n     }\n+     {\n+       \"key\": 3\n+       \"value\": \"g\"\n+     }\n   ]\n   [\n     {\n       \"key\": -2\n     {\n       \"key\": 1\n       \"value\": \"b\"\n     }\n+     {\n+       \"key\": 2.5\n+       \"value\": \"h\"\n+     }\n+     {\n+       \"key\": 3\n+       \"value\": \"g\"\n+     }\n   ]\n   [\n     {\n       \"key\": -2\n"
                },
                "isRoot": false,
                "uuid": "d7998def-7328-419b-9eda-eb3c8fe85ebd",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "add i after g",
                "fullTitle": "SkipList addAfter add i after g",
                "timedOut": false,
                "duration": 1,
                "state": "failed",
                "pass": false,
                "fail": true,
                "pending": false,
                "code": "if (_test.expected.error) {\n\t(() => list.addAfter(..._test.args)).should.throw(_test.expected.error, {\n\t\tmessage: _test.expected.message\n\t});\n} else {\n\tlist.addAfter(..._test.args).should.equal(_test.expected.returned);\n\tgetSubLists(list).should.deepEqual(_test.expected.lists);\n}",
                "err": {
                  "message": "AssertionError: expected Array [\n  Array [ Object { key: 1, value: 'b' } ],\n  Array [\n    Object { key: -2, value: 'e' },\n    Object { key: 0, value: 'a' },\n    Object { key: 1, value: 'b' }\n  ],\n  Array [\n    Object { key: -2, value: 'e' },\n    Object { key: 0, value: 'a' },\n    Object { key: 1, value: 'b' },\n    Object { key: 4, value: 'i' }\n  ],\n  Array [\n    Object { key: -2, value: 'e' },\n    Object { key: -1, value: 'c' },\n    Object { key: 0, value: 'a' },\n    Object { key: 0.5, value: 'd' },\n    Object { key: 1, value: 'b' },\n    Object { key: 2, value: 'f' },\n    Object { key: 2.5, value: 'h' },\n    Object { key: 3, value: 'g' },\n    Object { key: 4, value: 'i' }\n  ]\n] to equal Array [\n  Array [\n    Object { key: -2, value: 'e' },\n    Object { key: 2.5, value: 'h' }\n  ],\n  Array [\n    Object { key: -2, value: 'e' },\n    Object { key: 0, value: 'a' },\n    Object { key: 2.5, value: 'h' },\n    Object { key: 3, value: 'g' }\n  ],\n  Array [\n    Object { key: -2, value: 'e' },\n    Object { key: 0, value: 'a' },\n    Object { key: 1, value: 'b' },\n    Object { key: 2.5, value: 'h' },\n    Object { key: 3, value: 'g' }\n  ],\n  Array [\n    Object { key: -2, value: 'e' },\n    Object { key: -1, value: 'c' },\n    Object { key: 0, value: 'a' },\n    Object { key: 0.5, value: 'd' },\n    Object { key: 1, value: 'b' },\n    Object { key: 2, value: 'f' },\n    Object { key: 2.5, value: 'h' },\n    Object { key: 3, value: 'g' },\n    Object { key: 4, value: 'i' }\n  ]\n] (at '0' -> length, A has 1 and B has 2)",
                  "estack": "AssertionError: expected Array [\n  Array [ Object { key: 1, value: 'b' } ],\n  Array [\n    Object { key: -2, value: 'e' },\n    Object { key: 0, value: 'a' },\n    Object { key: 1, value: 'b' }\n  ],\n  Array [\n    Object { key: -2, value: 'e' },\n    Object { key: 0, value: 'a' },\n    Object { key: 1, value: 'b' },\n    Object { key: 4, value: 'i' }\n  ],\n  Array [\n    Object { key: -2, value: 'e' },\n    Object { key: -1, value: 'c' },\n    Object { key: 0, value: 'a' },\n    Object { key: 0.5, value: 'd' },\n    Object { key: 1, value: 'b' },\n    Object { key: 2, value: 'f' },\n    Object { key: 2.5, value: 'h' },\n    Object { key: 3, value: 'g' },\n    Object { key: 4, value: 'i' }\n  ]\n] to equal Array [\n  Array [\n    Object { key: -2, value: 'e' },\n    Object { key: 2.5, value: 'h' }\n  ],\n  Array [\n    Object { key: -2, value: 'e' },\n    Object { key: 0, value: 'a' },\n    Object { key: 2.5, value: 'h' },\n    Object { key: 3, value: 'g' }\n  ],\n  Array [\n    Object { key: -2, value: 'e' },\n    Object { key: 0, value: 'a' },\n    Object { key: 1, value: 'b' },\n    Object { key: 2.5, value: 'h' },\n    Object { key: 3, value: 'g' }\n  ],\n  Array [\n    Object { key: -2, value: 'e' },\n    Object { key: -1, value: 'c' },\n    Object { key: 0, value: 'a' },\n    Object { key: 0.5, value: 'd' },\n    Object { key: 1, value: 'b' },\n    Object { key: 2, value: 'f' },\n    Object { key: 2.5, value: 'h' },\n    Object { key: 3, value: 'g' },\n    Object { key: 4, value: 'i' }\n  ]\n] (at '0' -> length, A has 1 and B has 2)\n    at Assertion.fail (node_modules\\should\\cjs\\should.js:275:17)\n    at Assertion.value (node_modules\\should\\cjs\\should.js:356:19)\n    at Context.<anonymous> (test\\skiplist.test.js:144:32)",
                  "diff": " [\n   [\n     {\n-       \"key\": 1\n-       \"value\": \"b\"\n+       \"key\": -2\n+       \"value\": \"e\"\n     }\n+     {\n+       \"key\": 2.5\n+       \"value\": \"h\"\n+     }\n   ]\n   [\n     {\n       \"key\": -2\n       \"key\": 0\n       \"value\": \"a\"\n     }\n     {\n-       \"key\": 1\n-       \"value\": \"b\"\n+       \"key\": 2.5\n+       \"value\": \"h\"\n     }\n+     {\n+       \"key\": 3\n+       \"value\": \"g\"\n+     }\n   ]\n   [\n     {\n       \"key\": -2\n       \"key\": 1\n       \"value\": \"b\"\n     }\n     {\n-       \"key\": 4\n-       \"value\": \"i\"\n+       \"key\": 2.5\n+       \"value\": \"h\"\n     }\n+     {\n+       \"key\": 3\n+       \"value\": \"g\"\n+     }\n   ]\n   [\n     {\n       \"key\": -2\n"
                },
                "isRoot": false,
                "uuid": "1fd2363e-ae63-4aea-86f8-0a9c1ec0b61d",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "add j after h",
                "fullTitle": "SkipList addAfter add j after h",
                "timedOut": false,
                "duration": 2,
                "state": "failed",
                "pass": false,
                "fail": true,
                "pending": false,
                "code": "if (_test.expected.error) {\n\t(() => list.addAfter(..._test.args)).should.throw(_test.expected.error, {\n\t\tmessage: _test.expected.message\n\t});\n} else {\n\tlist.addAfter(..._test.args).should.equal(_test.expected.returned);\n\tgetSubLists(list).should.deepEqual(_test.expected.lists);\n}",
                "err": {
                  "message": "AssertionError: expected Array [\n  Array [ Object { key: 1, value: 'b' } ],\n  Array [\n    Object { key: -2, value: 'e' },\n    Object { key: 0, value: 'a' },\n    Object { key: 1, value: 'b' }\n  ],\n  Array [\n    Object { key: -2, value: 'e' },\n    Object { key: 0, value: 'a' },\n    Object { key: 1, value: 'b' },\n    Object { key: 4, value: 'i' }\n  ],\n  Array [\n    Object { key: -2, value: 'e' },\n    Object { key: -1, value: 'c' },\n    Object { key: 0, value: 'a' },\n    Object { key: 0.5, value: 'd' },\n    Object { key: 1, value: 'b' },\n    Object { key: 2, value: 'f' },\n    Object { key: 2.5, value: 'h' },\n    Object { key: 2.75, value: 'j' },\n    Object { key: 3, value: 'g' },\n    Object { key: 4, value: 'i' }\n  ]\n] to equal Array [\n  Array [\n    Object { key: -2, value: 'e' },\n    Object { key: 2.5, value: 'h' }\n  ],\n  Array [\n    Object { key: -2, value: 'e' },\n    Object { key: 0, value: 'a' },\n    Object { key: 2.5, value: 'h' },\n    Object { key: 3, value: 'g' }\n  ],\n  Array [\n    Object { key: -2, value: 'e' },\n    Object { key: 0, value: 'a' },\n    Object { key: 1, value: 'b' },\n    Object { key: 2.5, value: 'h' },\n    Object { key: 3, value: 'g' }\n  ],\n  Array [\n    Object { key: -2, value: 'e' },\n    Object { key: -1, value: 'c' },\n    Object { key: 0, value: 'a' },\n    Object { key: 0.5, value: 'd' },\n    Object { key: 1, value: 'b' },\n    Object { key: 2, value: 'f' },\n    Object { key: 2.5, value: 'h' },\n    Object { key: 2.75, value: 'j' },\n    Object { key: 3, value: 'g' },\n    Object { key: 4, value: 'i' }\n  ]\n] (at '0' -> length, A has 1 and B has 2)",
                  "estack": "AssertionError: expected Array [\n  Array [ Object { key: 1, value: 'b' } ],\n  Array [\n    Object { key: -2, value: 'e' },\n    Object { key: 0, value: 'a' },\n    Object { key: 1, value: 'b' }\n  ],\n  Array [\n    Object { key: -2, value: 'e' },\n    Object { key: 0, value: 'a' },\n    Object { key: 1, value: 'b' },\n    Object { key: 4, value: 'i' }\n  ],\n  Array [\n    Object { key: -2, value: 'e' },\n    Object { key: -1, value: 'c' },\n    Object { key: 0, value: 'a' },\n    Object { key: 0.5, value: 'd' },\n    Object { key: 1, value: 'b' },\n    Object { key: 2, value: 'f' },\n    Object { key: 2.5, value: 'h' },\n    Object { key: 2.75, value: 'j' },\n    Object { key: 3, value: 'g' },\n    Object { key: 4, value: 'i' }\n  ]\n] to equal Array [\n  Array [\n    Object { key: -2, value: 'e' },\n    Object { key: 2.5, value: 'h' }\n  ],\n  Array [\n    Object { key: -2, value: 'e' },\n    Object { key: 0, value: 'a' },\n    Object { key: 2.5, value: 'h' },\n    Object { key: 3, value: 'g' }\n  ],\n  Array [\n    Object { key: -2, value: 'e' },\n    Object { key: 0, value: 'a' },\n    Object { key: 1, value: 'b' },\n    Object { key: 2.5, value: 'h' },\n    Object { key: 3, value: 'g' }\n  ],\n  Array [\n    Object { key: -2, value: 'e' },\n    Object { key: -1, value: 'c' },\n    Object { key: 0, value: 'a' },\n    Object { key: 0.5, value: 'd' },\n    Object { key: 1, value: 'b' },\n    Object { key: 2, value: 'f' },\n    Object { key: 2.5, value: 'h' },\n    Object { key: 2.75, value: 'j' },\n    Object { key: 3, value: 'g' },\n    Object { key: 4, value: 'i' }\n  ]\n] (at '0' -> length, A has 1 and B has 2)\n    at Assertion.fail (node_modules\\should\\cjs\\should.js:275:17)\n    at Assertion.value (node_modules\\should\\cjs\\should.js:356:19)\n    at Context.<anonymous> (test\\skiplist.test.js:144:32)",
                  "diff": " [\n   [\n     {\n-       \"key\": 1\n-       \"value\": \"b\"\n+       \"key\": -2\n+       \"value\": \"e\"\n     }\n+     {\n+       \"key\": 2.5\n+       \"value\": \"h\"\n+     }\n   ]\n   [\n     {\n       \"key\": -2\n       \"key\": 0\n       \"value\": \"a\"\n     }\n     {\n-       \"key\": 1\n-       \"value\": \"b\"\n+       \"key\": 2.5\n+       \"value\": \"h\"\n     }\n+     {\n+       \"key\": 3\n+       \"value\": \"g\"\n+     }\n   ]\n   [\n     {\n       \"key\": -2\n       \"key\": 1\n       \"value\": \"b\"\n     }\n     {\n-       \"key\": 4\n-       \"value\": \"i\"\n+       \"key\": 2.5\n+       \"value\": \"h\"\n     }\n+     {\n+       \"key\": 3\n+       \"value\": \"g\"\n+     }\n   ]\n   [\n     {\n       \"key\": -2\n"
                },
                "isRoot": false,
                "uuid": "3602a84e-c274-43ca-811c-ea362bc94b85",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "df9d981e-80b7-495f-ae17-c92e1f69cb4c",
              "092b889f-3c54-4522-b3a0-4a0a68a1f1ae",
              "b0e84811-1387-4037-8531-667b666b7779",
              "bd9b401e-0efb-4463-a4e6-392839071aa6"
            ],
            "failures": [
              "c3761f9a-8340-4415-944f-06e43a0f27ce",
              "89b3904c-d965-4974-b1dc-337441169999",
              "1c4aab6d-cfa1-4430-84c8-f2a1cda1cbb4",
              "ee55045d-ef71-467b-a862-9d0b26e1f417",
              "e1a264d5-92a4-4548-aabc-f54ccf1f874a",
              "b0cc75a7-cee2-4b22-97de-8fdc077ebeec",
              "d7998def-7328-419b-9eda-eb3c8fe85ebd",
              "1fd2363e-ae63-4aea-86f8-0a9c1ec0b61d",
              "3602a84e-c274-43ca-811c-ea362bc94b85"
            ],
            "pending": [],
            "skipped": [],
            "duration": 14,
            "root": false,
            "rootEmpty": false,
            "_timeout": 2000
          },
          {
            "uuid": "abdc8045-7c22-431d-bdce-3210a4652d75",
            "title": "get",
            "fullFile": "C:\\Users\\vpxbo\\Documents\\Github\\public-spotify-queue\\test\\skiplist.test.js",
            "file": "\\test\\skiplist.test.js",
            "beforeHooks": [],
            "afterHooks": [
              {
                "title": "\"after all\" hook",
                "fullTitle": "SkipList get \"after all\" hook",
                "timedOut": false,
                "duration": 25,
                "pass": false,
                "fail": false,
                "pending": false,
                "code": "console.log(\"done with get\")",
                "err": {},
                "isRoot": false,
                "uuid": "1452b145-757a-47ed-8113-85346d785e4d",
                "isHook": true,
                "skipped": false
              }
            ],
            "tests": [
              {
                "title": "fails if key is negative infinity",
                "fullTitle": "SkipList get fails if key is negative infinity",
                "timedOut": false,
                "duration": 1,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "if (_test.expected.error) {\n\t(() => list.get(..._test.args)).should.throw(_test.expected.error, {\n\t\tmessage: _test.expected.message\n\t});\n} else {\n\tlist.get(..._test.args).should.equal(_test.expected);\n}",
                "err": {},
                "isRoot": false,
                "uuid": "a67b36ba-d61d-44fc-a8d7-76e90070d61c",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "fails if key is positive infinity",
                "fullTitle": "SkipList get fails if key is positive infinity",
                "timedOut": false,
                "duration": 1,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "if (_test.expected.error) {\n\t(() => list.get(..._test.args)).should.throw(_test.expected.error, {\n\t\tmessage: _test.expected.message\n\t});\n} else {\n\tlist.get(..._test.args).should.equal(_test.expected);\n}",
                "err": {},
                "isRoot": false,
                "uuid": "7c89c9d9-d025-4f83-b46f-90ff79bc8d6b",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "gets 'a' for key 0",
                "fullTitle": "SkipList get gets 'a' for key 0",
                "timedOut": false,
                "duration": 1,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "if (_test.expected.error) {\n\t(() => list.get(..._test.args)).should.throw(_test.expected.error, {\n\t\tmessage: _test.expected.message\n\t});\n} else {\n\tlist.get(..._test.args).should.equal(_test.expected);\n}",
                "err": {},
                "isRoot": false,
                "uuid": "c9e0039a-22b7-4035-93d8-b6a36f162fb2",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "gets 'b' for key 1",
                "fullTitle": "SkipList get gets 'b' for key 1",
                "timedOut": false,
                "duration": 1,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "if (_test.expected.error) {\n\t(() => list.get(..._test.args)).should.throw(_test.expected.error, {\n\t\tmessage: _test.expected.message\n\t});\n} else {\n\tlist.get(..._test.args).should.equal(_test.expected);\n}",
                "err": {},
                "isRoot": false,
                "uuid": "be1c67c6-befc-4939-9e0b-747d8d99ac06",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "gets 'c' for key -1",
                "fullTitle": "SkipList get gets 'c' for key -1",
                "timedOut": false,
                "duration": 1,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "if (_test.expected.error) {\n\t(() => list.get(..._test.args)).should.throw(_test.expected.error, {\n\t\tmessage: _test.expected.message\n\t});\n} else {\n\tlist.get(..._test.args).should.equal(_test.expected);\n}",
                "err": {},
                "isRoot": false,
                "uuid": "8caa253d-25ae-4069-8c64-f057bd51f6f7",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "gets 'd' for key 0.5",
                "fullTitle": "SkipList get gets 'd' for key 0.5",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "if (_test.expected.error) {\n\t(() => list.get(..._test.args)).should.throw(_test.expected.error, {\n\t\tmessage: _test.expected.message\n\t});\n} else {\n\tlist.get(..._test.args).should.equal(_test.expected);\n}",
                "err": {},
                "isRoot": false,
                "uuid": "4c17c482-26eb-405e-9216-a45b7b5ff712",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "gets 'e' for key -2",
                "fullTitle": "SkipList get gets 'e' for key -2",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "if (_test.expected.error) {\n\t(() => list.get(..._test.args)).should.throw(_test.expected.error, {\n\t\tmessage: _test.expected.message\n\t});\n} else {\n\tlist.get(..._test.args).should.equal(_test.expected);\n}",
                "err": {},
                "isRoot": false,
                "uuid": "59cc6bee-194c-4df7-b093-c8db011d7024",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "gets 'f' for key 2",
                "fullTitle": "SkipList get gets 'f' for key 2",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "if (_test.expected.error) {\n\t(() => list.get(..._test.args)).should.throw(_test.expected.error, {\n\t\tmessage: _test.expected.message\n\t});\n} else {\n\tlist.get(..._test.args).should.equal(_test.expected);\n}",
                "err": {},
                "isRoot": false,
                "uuid": "de336d5e-f778-470b-b16b-c94eacf02eb4",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "gets 'g' for key 3",
                "fullTitle": "SkipList get gets 'g' for key 3",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "if (_test.expected.error) {\n\t(() => list.get(..._test.args)).should.throw(_test.expected.error, {\n\t\tmessage: _test.expected.message\n\t});\n} else {\n\tlist.get(..._test.args).should.equal(_test.expected);\n}",
                "err": {},
                "isRoot": false,
                "uuid": "8275de83-9399-45be-a94f-86501e51c503",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "gets 'h' for key 2.5",
                "fullTitle": "SkipList get gets 'h' for key 2.5",
                "timedOut": false,
                "duration": 1,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "if (_test.expected.error) {\n\t(() => list.get(..._test.args)).should.throw(_test.expected.error, {\n\t\tmessage: _test.expected.message\n\t});\n} else {\n\tlist.get(..._test.args).should.equal(_test.expected);\n}",
                "err": {},
                "isRoot": false,
                "uuid": "58f4caed-4bcb-4a15-9e3a-934babf2903a",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "gets 'i' for key 4",
                "fullTitle": "SkipList get gets 'i' for key 4",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "if (_test.expected.error) {\n\t(() => list.get(..._test.args)).should.throw(_test.expected.error, {\n\t\tmessage: _test.expected.message\n\t});\n} else {\n\tlist.get(..._test.args).should.equal(_test.expected);\n}",
                "err": {},
                "isRoot": false,
                "uuid": "0f4ba0ee-22bf-49a0-93cb-c0039019d1d5",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "gets 'j' for key 2.75",
                "fullTitle": "SkipList get gets 'j' for key 2.75",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "if (_test.expected.error) {\n\t(() => list.get(..._test.args)).should.throw(_test.expected.error, {\n\t\tmessage: _test.expected.message\n\t});\n} else {\n\tlist.get(..._test.args).should.equal(_test.expected);\n}",
                "err": {},
                "isRoot": false,
                "uuid": "8448c3ac-6bb2-43f3-a625-c5c0a4a64b71",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "a67b36ba-d61d-44fc-a8d7-76e90070d61c",
              "7c89c9d9-d025-4f83-b46f-90ff79bc8d6b",
              "c9e0039a-22b7-4035-93d8-b6a36f162fb2",
              "be1c67c6-befc-4939-9e0b-747d8d99ac06",
              "8caa253d-25ae-4069-8c64-f057bd51f6f7",
              "4c17c482-26eb-405e-9216-a45b7b5ff712",
              "59cc6bee-194c-4df7-b093-c8db011d7024",
              "de336d5e-f778-470b-b16b-c94eacf02eb4",
              "8275de83-9399-45be-a94f-86501e51c503",
              "58f4caed-4bcb-4a15-9e3a-934babf2903a",
              "0f4ba0ee-22bf-49a0-93cb-c0039019d1d5",
              "8448c3ac-6bb2-43f3-a625-c5c0a4a64b71"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 6,
            "root": false,
            "rootEmpty": false,
            "_timeout": 2000
          },
          {
            "uuid": "10df8db4-f7d8-4f87-8d56-ce09b3d3abd6",
            "title": "non-empty",
            "fullFile": "C:\\Users\\vpxbo\\Documents\\Github\\public-spotify-queue\\test\\skiplist.test.js",
            "file": "\\test\\skiplist.test.js",
            "beforeHooks": [],
            "afterHooks": [
              {
                "title": "\"after all\" hook",
                "fullTitle": "SkipList non-empty \"after all\" hook",
                "timedOut": false,
                "duration": 24,
                "pass": false,
                "fail": false,
                "pending": false,
                "code": "console.log(\"done with non-empty\")",
                "err": {},
                "isRoot": false,
                "uuid": "e0e20d6e-5992-4707-801a-e253b163a3b6",
                "isHook": true,
                "skipped": false
              }
            ],
            "tests": [
              {
                "title": "should have a size of 10",
                "fullTitle": "SkipList non-empty should have a size of 10",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "list[_test.func](..._test.args).should.equal(_test.expected);",
                "err": {},
                "isRoot": false,
                "uuid": "090b737e-cb9b-418d-9932-42f4776e1cab",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should have a string with 10 key-value pairs",
                "fullTitle": "SkipList non-empty should have a string with 10 key-value pairs",
                "timedOut": false,
                "duration": 1,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "list[_test.func](..._test.args).should.equal(_test.expected);",
                "err": {},
                "isRoot": false,
                "uuid": "8d27f902-6a4e-458d-ac5b-992eab471bd0",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "090b737e-cb9b-418d-9932-42f4776e1cab",
              "8d27f902-6a4e-458d-ac5b-992eab471bd0"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 1,
            "root": false,
            "rootEmpty": false,
            "_timeout": 2000
          },
          {
            "uuid": "698657d5-9733-47a2-b06e-04be5ea942f1",
            "title": "set",
            "fullFile": "C:\\Users\\vpxbo\\Documents\\Github\\public-spotify-queue\\test\\skiplist.test.js",
            "file": "\\test\\skiplist.test.js",
            "beforeHooks": [],
            "afterHooks": [
              {
                "title": "\"after all\" hook",
                "fullTitle": "SkipList set \"after all\" hook",
                "timedOut": false,
                "duration": 8,
                "pass": false,
                "fail": false,
                "pending": false,
                "code": "console.log(\"done with set\")",
                "err": {},
                "isRoot": false,
                "uuid": "76f156d5-90e3-4a91-816f-fa73d5e89586",
                "isHook": true,
                "skipped": false
              }
            ],
            "tests": [
              {
                "title": "fails if key is not a number",
                "fullTitle": "SkipList set fails if key is not a number",
                "timedOut": false,
                "duration": 2,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "if (_test.expected.error) {\n\t(() => list.set(..._test.args)).should.throw(_test.expected.error, {\n\t\tmessage: _test.expected.message\n\t});\n} else {\n\tlist.set(..._test.args).should.equal(_test.expected.returned);\n\tgetSubLists(list).should.deepEqual(_test.expected.lists);\n}",
                "err": {},
                "isRoot": false,
                "uuid": "2e0d7fa3-5dc6-4747-b34e-dd934b42dccb",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "fails if key is negative infinity",
                "fullTitle": "SkipList set fails if key is negative infinity",
                "timedOut": false,
                "duration": 1,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "if (_test.expected.error) {\n\t(() => list.set(..._test.args)).should.throw(_test.expected.error, {\n\t\tmessage: _test.expected.message\n\t});\n} else {\n\tlist.set(..._test.args).should.equal(_test.expected.returned);\n\tgetSubLists(list).should.deepEqual(_test.expected.lists);\n}",
                "err": {},
                "isRoot": false,
                "uuid": "00e346bf-15c5-4b74-80fc-0ba9e68666eb",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "fails if key is positive infinity",
                "fullTitle": "SkipList set fails if key is positive infinity",
                "timedOut": false,
                "duration": 1,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "if (_test.expected.error) {\n\t(() => list.set(..._test.args)).should.throw(_test.expected.error, {\n\t\tmessage: _test.expected.message\n\t});\n} else {\n\tlist.set(..._test.args).should.equal(_test.expected.returned);\n\tgetSubLists(list).should.deepEqual(_test.expected.lists);\n}",
                "err": {},
                "isRoot": false,
                "uuid": "9e8e26fc-3a4c-436c-a94b-707afcfa3ab2",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "fails if key doesn't exist",
                "fullTitle": "SkipList set fails if key doesn't exist",
                "timedOut": false,
                "duration": 1,
                "state": "failed",
                "pass": false,
                "fail": true,
                "pending": false,
                "code": "if (_test.expected.error) {\n\t(() => list.set(..._test.args)).should.throw(_test.expected.error, {\n\t\tmessage: _test.expected.message\n\t});\n} else {\n\tlist.set(..._test.args).should.equal(_test.expected.returned);\n\tgetSubLists(list).should.deepEqual(_test.expected.lists);\n}",
                "err": {
                  "message": "AssertionError: expected Array [\n  Array [ Object { key: 1, value: 'b' } ],\n  Array [\n    Object { key: -2, value: 'e' },\n    Object { key: 0, value: 'a' },\n    Object { key: 1, value: 'b' }\n  ],\n  Array [\n    Object { key: -2, value: 'e' },\n    Object { key: 0, value: 'a' },\n    Object { key: 1, value: 'b' },\n    Object { key: 4, value: 'i' }\n  ],\n  Array [\n    Object { key: -2, value: 'e' },\n    Object { key: -1, value: 'c' },\n    Object { key: 0, value: 'a' },\n    Object { key: 0.5, value: 'd' },\n    Object { key: 1, value: 'b' },\n    Object { key: 2, value: 'f' },\n    Object { key: 2.5, value: 'h' },\n    Object { key: 2.75, value: 'j' },\n    Object { key: 3, value: 'g' },\n    Object { key: 4, value: 'i' }\n  ]\n] to equal Array [\n  Array [\n    Object { key: -2, value: 'e' },\n    Object { key: 2.5, value: 'h' }\n  ],\n  Array [\n    Object { key: -2, value: 'e' },\n    Object { key: 0, value: 'a' },\n    Object { key: 2.5, value: 'h' },\n    Object { key: 3, value: 'g' }\n  ],\n  Array [\n    Object { key: -2, value: 'e' },\n    Object { key: 0, value: 'a' },\n    Object { key: 1, value: 'b' },\n    Object { key: 2.5, value: 'h' },\n    Object { key: 3, value: 'g' }\n  ],\n  Array [\n    Object { key: -2, value: 'e' },\n    Object { key: -1, value: 'c' },\n    Object { key: 0, value: 'a' },\n    Object { key: 0.5, value: 'd' },\n    Object { key: 1, value: 'b' },\n    Object { key: 2, value: 'f' },\n    Object { key: 2.5, value: 'h' },\n    Object { key: 2.75, value: 'j' },\n    Object { key: 3, value: 'g' },\n    Object { key: 4, value: 'i' }\n  ]\n] (at '0' -> length, A has 1 and B has 2)",
                  "estack": "AssertionError: expected Array [\n  Array [ Object { key: 1, value: 'b' } ],\n  Array [\n    Object { key: -2, value: 'e' },\n    Object { key: 0, value: 'a' },\n    Object { key: 1, value: 'b' }\n  ],\n  Array [\n    Object { key: -2, value: 'e' },\n    Object { key: 0, value: 'a' },\n    Object { key: 1, value: 'b' },\n    Object { key: 4, value: 'i' }\n  ],\n  Array [\n    Object { key: -2, value: 'e' },\n    Object { key: -1, value: 'c' },\n    Object { key: 0, value: 'a' },\n    Object { key: 0.5, value: 'd' },\n    Object { key: 1, value: 'b' },\n    Object { key: 2, value: 'f' },\n    Object { key: 2.5, value: 'h' },\n    Object { key: 2.75, value: 'j' },\n    Object { key: 3, value: 'g' },\n    Object { key: 4, value: 'i' }\n  ]\n] to equal Array [\n  Array [\n    Object { key: -2, value: 'e' },\n    Object { key: 2.5, value: 'h' }\n  ],\n  Array [\n    Object { key: -2, value: 'e' },\n    Object { key: 0, value: 'a' },\n    Object { key: 2.5, value: 'h' },\n    Object { key: 3, value: 'g' }\n  ],\n  Array [\n    Object { key: -2, value: 'e' },\n    Object { key: 0, value: 'a' },\n    Object { key: 1, value: 'b' },\n    Object { key: 2.5, value: 'h' },\n    Object { key: 3, value: 'g' }\n  ],\n  Array [\n    Object { key: -2, value: 'e' },\n    Object { key: -1, value: 'c' },\n    Object { key: 0, value: 'a' },\n    Object { key: 0.5, value: 'd' },\n    Object { key: 1, value: 'b' },\n    Object { key: 2, value: 'f' },\n    Object { key: 2.5, value: 'h' },\n    Object { key: 2.75, value: 'j' },\n    Object { key: 3, value: 'g' },\n    Object { key: 4, value: 'i' }\n  ]\n] (at '0' -> length, A has 1 and B has 2)\n    at Assertion.fail (node_modules\\should\\cjs\\should.js:275:17)\n    at Assertion.value (node_modules\\should\\cjs\\should.js:356:19)\n    at Context.<anonymous> (test\\skiplist.test.js:194:31)",
                  "diff": " [\n   [\n     {\n-       \"key\": 1\n-       \"value\": \"b\"\n+       \"key\": -2\n+       \"value\": \"e\"\n     }\n+     {\n+       \"key\": 2.5\n+       \"value\": \"h\"\n+     }\n   ]\n   [\n     {\n       \"key\": -2\n       \"key\": 0\n       \"value\": \"a\"\n     }\n     {\n-       \"key\": 1\n-       \"value\": \"b\"\n+       \"key\": 2.5\n+       \"value\": \"h\"\n     }\n+     {\n+       \"key\": 3\n+       \"value\": \"g\"\n+     }\n   ]\n   [\n     {\n       \"key\": -2\n       \"key\": 1\n       \"value\": \"b\"\n     }\n     {\n-       \"key\": 4\n-       \"value\": \"i\"\n+       \"key\": 2.5\n+       \"value\": \"h\"\n     }\n+     {\n+       \"key\": 3\n+       \"value\": \"g\"\n+     }\n   ]\n   [\n     {\n       \"key\": -2\n"
                },
                "isRoot": false,
                "uuid": "d7c702d3-f0a5-451c-874a-602a64cf259c",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "set key 0 with new value 'z'",
                "fullTitle": "SkipList set set key 0 with new value 'z'",
                "timedOut": false,
                "duration": 1,
                "state": "failed",
                "pass": false,
                "fail": true,
                "pending": false,
                "code": "if (_test.expected.error) {\n\t(() => list.set(..._test.args)).should.throw(_test.expected.error, {\n\t\tmessage: _test.expected.message\n\t});\n} else {\n\tlist.set(..._test.args).should.equal(_test.expected.returned);\n\tgetSubLists(list).should.deepEqual(_test.expected.lists);\n}",
                "err": {
                  "message": "AssertionError: expected Array [\n  Array [ Object { key: 1, value: 'b' } ],\n  Array [\n    Object { key: -2, value: 'e' },\n    Object { key: 0, value: 'z' },\n    Object { key: 1, value: 'b' }\n  ],\n  Array [\n    Object { key: -2, value: 'e' },\n    Object { key: 0, value: 'z' },\n    Object { key: 1, value: 'b' },\n    Object { key: 4, value: 'i' }\n  ],\n  Array [\n    Object { key: -2, value: 'e' },\n    Object { key: -1, value: 'c' },\n    Object { key: 0, value: 'z' },\n    Object { key: 0.5, value: 'd' },\n    Object { key: 1, value: 'b' },\n    Object { key: 2, value: 'f' },\n    Object { key: 2.5, value: 'h' },\n    Object { key: 2.75, value: 'j' },\n    Object { key: 3, value: 'g' },\n    Object { key: 4, value: 'i' }\n  ]\n] to equal Array [\n  Array [\n    Object { key: -2, value: 'e' },\n    Object { key: 2.5, value: 'h' }\n  ],\n  Array [\n    Object { key: -2, value: 'e' },\n    Object { key: 0, value: 'z' },\n    Object { key: 2.5, value: 'h' },\n    Object { key: 3, value: 'g' }\n  ],\n  Array [\n    Object { key: -2, value: 'e' },\n    Object { key: 0, value: 'z' },\n    Object { key: 1, value: 'b' },\n    Object { key: 2.5, value: 'h' },\n    Object { key: 3, value: 'g' }\n  ],\n  Array [\n    Object { key: -2, value: 'e' },\n    Object { key: -1, value: 'c' },\n    Object { key: 0, value: 'z' },\n    Object { key: 0.5, value: 'd' },\n    Object { key: 1, value: 'b' },\n    Object { key: 2, value: 'f' },\n    Object { key: 2.5, value: 'h' },\n    Object { key: 2.75, value: 'j' },\n    Object { key: 3, value: 'g' },\n    Object { key: 4, value: 'i' }\n  ]\n] (at '0' -> length, A has 1 and B has 2)",
                  "estack": "AssertionError: expected Array [\n  Array [ Object { key: 1, value: 'b' } ],\n  Array [\n    Object { key: -2, value: 'e' },\n    Object { key: 0, value: 'z' },\n    Object { key: 1, value: 'b' }\n  ],\n  Array [\n    Object { key: -2, value: 'e' },\n    Object { key: 0, value: 'z' },\n    Object { key: 1, value: 'b' },\n    Object { key: 4, value: 'i' }\n  ],\n  Array [\n    Object { key: -2, value: 'e' },\n    Object { key: -1, value: 'c' },\n    Object { key: 0, value: 'z' },\n    Object { key: 0.5, value: 'd' },\n    Object { key: 1, value: 'b' },\n    Object { key: 2, value: 'f' },\n    Object { key: 2.5, value: 'h' },\n    Object { key: 2.75, value: 'j' },\n    Object { key: 3, value: 'g' },\n    Object { key: 4, value: 'i' }\n  ]\n] to equal Array [\n  Array [\n    Object { key: -2, value: 'e' },\n    Object { key: 2.5, value: 'h' }\n  ],\n  Array [\n    Object { key: -2, value: 'e' },\n    Object { key: 0, value: 'z' },\n    Object { key: 2.5, value: 'h' },\n    Object { key: 3, value: 'g' }\n  ],\n  Array [\n    Object { key: -2, value: 'e' },\n    Object { key: 0, value: 'z' },\n    Object { key: 1, value: 'b' },\n    Object { key: 2.5, value: 'h' },\n    Object { key: 3, value: 'g' }\n  ],\n  Array [\n    Object { key: -2, value: 'e' },\n    Object { key: -1, value: 'c' },\n    Object { key: 0, value: 'z' },\n    Object { key: 0.5, value: 'd' },\n    Object { key: 1, value: 'b' },\n    Object { key: 2, value: 'f' },\n    Object { key: 2.5, value: 'h' },\n    Object { key: 2.75, value: 'j' },\n    Object { key: 3, value: 'g' },\n    Object { key: 4, value: 'i' }\n  ]\n] (at '0' -> length, A has 1 and B has 2)\n    at Assertion.fail (node_modules\\should\\cjs\\should.js:275:17)\n    at Assertion.value (node_modules\\should\\cjs\\should.js:356:19)\n    at Context.<anonymous> (test\\skiplist.test.js:194:31)",
                  "diff": " [\n   [\n     {\n-       \"key\": 1\n-       \"value\": \"b\"\n+       \"key\": -2\n+       \"value\": \"e\"\n     }\n+     {\n+       \"key\": 2.5\n+       \"value\": \"h\"\n+     }\n   ]\n   [\n     {\n       \"key\": -2\n       \"key\": 0\n       \"value\": \"z\"\n     }\n     {\n-       \"key\": 1\n-       \"value\": \"b\"\n+       \"key\": 2.5\n+       \"value\": \"h\"\n     }\n+     {\n+       \"key\": 3\n+       \"value\": \"g\"\n+     }\n   ]\n   [\n     {\n       \"key\": -2\n       \"key\": 1\n       \"value\": \"b\"\n     }\n     {\n-       \"key\": 4\n-       \"value\": \"i\"\n+       \"key\": 2.5\n+       \"value\": \"h\"\n     }\n+     {\n+       \"key\": 3\n+       \"value\": \"g\"\n+     }\n   ]\n   [\n     {\n       \"key\": -2\n"
                },
                "isRoot": false,
                "uuid": "d9b09bcb-e4b5-47f4-92c7-f769a511ec71",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "set key 2.75 with new value 'y'",
                "fullTitle": "SkipList set set key 2.75 with new value 'y'",
                "timedOut": false,
                "duration": 1,
                "state": "failed",
                "pass": false,
                "fail": true,
                "pending": false,
                "code": "if (_test.expected.error) {\n\t(() => list.set(..._test.args)).should.throw(_test.expected.error, {\n\t\tmessage: _test.expected.message\n\t});\n} else {\n\tlist.set(..._test.args).should.equal(_test.expected.returned);\n\tgetSubLists(list).should.deepEqual(_test.expected.lists);\n}",
                "err": {
                  "message": "AssertionError: expected Array [\n  Array [ Object { key: 1, value: 'b' } ],\n  Array [\n    Object { key: -2, value: 'e' },\n    Object { key: 0, value: 'z' },\n    Object { key: 1, value: 'b' }\n  ],\n  Array [\n    Object { key: -2, value: 'e' },\n    Object { key: 0, value: 'z' },\n    Object { key: 1, value: 'b' },\n    Object { key: 4, value: 'i' }\n  ],\n  Array [\n    Object { key: -2, value: 'e' },\n    Object { key: -1, value: 'c' },\n    Object { key: 0, value: 'z' },\n    Object { key: 0.5, value: 'd' },\n    Object { key: 1, value: 'b' },\n    Object { key: 2, value: 'f' },\n    Object { key: 2.5, value: 'h' },\n    Object { key: 2.75, value: 'y' },\n    Object { key: 3, value: 'g' },\n    Object { key: 4, value: 'i' }\n  ]\n] to equal Array [\n  Array [\n    Object { key: -2, value: 'e' },\n    Object { key: 2.5, value: 'h' }\n  ],\n  Array [\n    Object { key: -2, value: 'e' },\n    Object { key: 0, value: 'z' },\n    Object { key: 2.5, value: 'h' },\n    Object { key: 3, value: 'g' }\n  ],\n  Array [\n    Object { key: -2, value: 'e' },\n    Object { key: 0, value: 'z' },\n    Object { key: 1, value: 'b' },\n    Object { key: 2.5, value: 'h' },\n    Object { key: 3, value: 'g' }\n  ],\n  Array [\n    Object { key: -2, value: 'e' },\n    Object { key: -1, value: 'c' },\n    Object { key: 0, value: 'z' },\n    Object { key: 0.5, value: 'd' },\n    Object { key: 1, value: 'b' },\n    Object { key: 2, value: 'f' },\n    Object { key: 2.5, value: 'h' },\n    Object { key: 2.75, value: 'y' },\n    Object { key: 3, value: 'g' },\n    Object { key: 4, value: 'i' }\n  ]\n] (at '0' -> length, A has 1 and B has 2)",
                  "estack": "AssertionError: expected Array [\n  Array [ Object { key: 1, value: 'b' } ],\n  Array [\n    Object { key: -2, value: 'e' },\n    Object { key: 0, value: 'z' },\n    Object { key: 1, value: 'b' }\n  ],\n  Array [\n    Object { key: -2, value: 'e' },\n    Object { key: 0, value: 'z' },\n    Object { key: 1, value: 'b' },\n    Object { key: 4, value: 'i' }\n  ],\n  Array [\n    Object { key: -2, value: 'e' },\n    Object { key: -1, value: 'c' },\n    Object { key: 0, value: 'z' },\n    Object { key: 0.5, value: 'd' },\n    Object { key: 1, value: 'b' },\n    Object { key: 2, value: 'f' },\n    Object { key: 2.5, value: 'h' },\n    Object { key: 2.75, value: 'y' },\n    Object { key: 3, value: 'g' },\n    Object { key: 4, value: 'i' }\n  ]\n] to equal Array [\n  Array [\n    Object { key: -2, value: 'e' },\n    Object { key: 2.5, value: 'h' }\n  ],\n  Array [\n    Object { key: -2, value: 'e' },\n    Object { key: 0, value: 'z' },\n    Object { key: 2.5, value: 'h' },\n    Object { key: 3, value: 'g' }\n  ],\n  Array [\n    Object { key: -2, value: 'e' },\n    Object { key: 0, value: 'z' },\n    Object { key: 1, value: 'b' },\n    Object { key: 2.5, value: 'h' },\n    Object { key: 3, value: 'g' }\n  ],\n  Array [\n    Object { key: -2, value: 'e' },\n    Object { key: -1, value: 'c' },\n    Object { key: 0, value: 'z' },\n    Object { key: 0.5, value: 'd' },\n    Object { key: 1, value: 'b' },\n    Object { key: 2, value: 'f' },\n    Object { key: 2.5, value: 'h' },\n    Object { key: 2.75, value: 'y' },\n    Object { key: 3, value: 'g' },\n    Object { key: 4, value: 'i' }\n  ]\n] (at '0' -> length, A has 1 and B has 2)\n    at Assertion.fail (node_modules\\should\\cjs\\should.js:275:17)\n    at Assertion.value (node_modules\\should\\cjs\\should.js:356:19)\n    at Context.<anonymous> (test\\skiplist.test.js:194:31)",
                  "diff": " [\n   [\n     {\n-       \"key\": 1\n-       \"value\": \"b\"\n+       \"key\": -2\n+       \"value\": \"e\"\n     }\n+     {\n+       \"key\": 2.5\n+       \"value\": \"h\"\n+     }\n   ]\n   [\n     {\n       \"key\": -2\n       \"key\": 0\n       \"value\": \"z\"\n     }\n     {\n-       \"key\": 1\n-       \"value\": \"b\"\n+       \"key\": 2.5\n+       \"value\": \"h\"\n     }\n+     {\n+       \"key\": 3\n+       \"value\": \"g\"\n+     }\n   ]\n   [\n     {\n       \"key\": -2\n       \"key\": 1\n       \"value\": \"b\"\n     }\n     {\n-       \"key\": 4\n-       \"value\": \"i\"\n+       \"key\": 2.5\n+       \"value\": \"h\"\n     }\n+     {\n+       \"key\": 3\n+       \"value\": \"g\"\n+     }\n   ]\n   [\n     {\n       \"key\": -2\n"
                },
                "isRoot": false,
                "uuid": "a05d6452-6b59-4fb1-a167-6545e5ff6fb5",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "set key -2 with new value 'x'",
                "fullTitle": "SkipList set set key -2 with new value 'x'",
                "timedOut": false,
                "duration": 1,
                "state": "failed",
                "pass": false,
                "fail": true,
                "pending": false,
                "code": "if (_test.expected.error) {\n\t(() => list.set(..._test.args)).should.throw(_test.expected.error, {\n\t\tmessage: _test.expected.message\n\t});\n} else {\n\tlist.set(..._test.args).should.equal(_test.expected.returned);\n\tgetSubLists(list).should.deepEqual(_test.expected.lists);\n}",
                "err": {
                  "message": "AssertionError: expected Array [\n  Array [ Object { key: 1, value: 'b' } ],\n  Array [\n    Object { key: -2, value: 'x' },\n    Object { key: 0, value: 'z' },\n    Object { key: 1, value: 'b' }\n  ],\n  Array [\n    Object { key: -2, value: 'x' },\n    Object { key: 0, value: 'z' },\n    Object { key: 1, value: 'b' },\n    Object { key: 4, value: 'i' }\n  ],\n  Array [\n    Object { key: -2, value: 'x' },\n    Object { key: -1, value: 'c' },\n    Object { key: 0, value: 'z' },\n    Object { key: 0.5, value: 'd' },\n    Object { key: 1, value: 'b' },\n    Object { key: 2, value: 'f' },\n    Object { key: 2.5, value: 'h' },\n    Object { key: 2.75, value: 'y' },\n    Object { key: 3, value: 'g' },\n    Object { key: 4, value: 'i' }\n  ]\n] to equal Array [\n  Array [\n    Object { key: -2, value: 'x' },\n    Object { key: 2.5, value: 'h' }\n  ],\n  Array [\n    Object { key: -2, value: 'x' },\n    Object { key: 0, value: 'z' },\n    Object { key: 2.5, value: 'h' },\n    Object { key: 3, value: 'g' }\n  ],\n  Array [\n    Object { key: -2, value: 'x' },\n    Object { key: 0, value: 'z' },\n    Object { key: 1, value: 'b' },\n    Object { key: 2.5, value: 'h' },\n    Object { key: 3, value: 'g' }\n  ],\n  Array [\n    Object { key: -2, value: 'x' },\n    Object { key: -1, value: 'c' },\n    Object { key: 0, value: 'z' },\n    Object { key: 0.5, value: 'd' },\n    Object { key: 1, value: 'b' },\n    Object { key: 2, value: 'f' },\n    Object { key: 2.5, value: 'h' },\n    Object { key: 2.75, value: 'y' },\n    Object { key: 3, value: 'g' },\n    Object { key: 4, value: 'i' }\n  ]\n] (at '0' -> length, A has 1 and B has 2)",
                  "estack": "AssertionError: expected Array [\n  Array [ Object { key: 1, value: 'b' } ],\n  Array [\n    Object { key: -2, value: 'x' },\n    Object { key: 0, value: 'z' },\n    Object { key: 1, value: 'b' }\n  ],\n  Array [\n    Object { key: -2, value: 'x' },\n    Object { key: 0, value: 'z' },\n    Object { key: 1, value: 'b' },\n    Object { key: 4, value: 'i' }\n  ],\n  Array [\n    Object { key: -2, value: 'x' },\n    Object { key: -1, value: 'c' },\n    Object { key: 0, value: 'z' },\n    Object { key: 0.5, value: 'd' },\n    Object { key: 1, value: 'b' },\n    Object { key: 2, value: 'f' },\n    Object { key: 2.5, value: 'h' },\n    Object { key: 2.75, value: 'y' },\n    Object { key: 3, value: 'g' },\n    Object { key: 4, value: 'i' }\n  ]\n] to equal Array [\n  Array [\n    Object { key: -2, value: 'x' },\n    Object { key: 2.5, value: 'h' }\n  ],\n  Array [\n    Object { key: -2, value: 'x' },\n    Object { key: 0, value: 'z' },\n    Object { key: 2.5, value: 'h' },\n    Object { key: 3, value: 'g' }\n  ],\n  Array [\n    Object { key: -2, value: 'x' },\n    Object { key: 0, value: 'z' },\n    Object { key: 1, value: 'b' },\n    Object { key: 2.5, value: 'h' },\n    Object { key: 3, value: 'g' }\n  ],\n  Array [\n    Object { key: -2, value: 'x' },\n    Object { key: -1, value: 'c' },\n    Object { key: 0, value: 'z' },\n    Object { key: 0.5, value: 'd' },\n    Object { key: 1, value: 'b' },\n    Object { key: 2, value: 'f' },\n    Object { key: 2.5, value: 'h' },\n    Object { key: 2.75, value: 'y' },\n    Object { key: 3, value: 'g' },\n    Object { key: 4, value: 'i' }\n  ]\n] (at '0' -> length, A has 1 and B has 2)\n    at Assertion.fail (node_modules\\should\\cjs\\should.js:275:17)\n    at Assertion.value (node_modules\\should\\cjs\\should.js:356:19)\n    at Context.<anonymous> (test\\skiplist.test.js:194:31)",
                  "diff": " [\n   [\n     {\n-       \"key\": 1\n-       \"value\": \"b\"\n+       \"key\": -2\n+       \"value\": \"x\"\n     }\n+     {\n+       \"key\": 2.5\n+       \"value\": \"h\"\n+     }\n   ]\n   [\n     {\n       \"key\": -2\n       \"key\": 0\n       \"value\": \"z\"\n     }\n     {\n-       \"key\": 1\n-       \"value\": \"b\"\n+       \"key\": 2.5\n+       \"value\": \"h\"\n     }\n+     {\n+       \"key\": 3\n+       \"value\": \"g\"\n+     }\n   ]\n   [\n     {\n       \"key\": -2\n       \"key\": 1\n       \"value\": \"b\"\n     }\n     {\n-       \"key\": 4\n-       \"value\": \"i\"\n+       \"key\": 2.5\n+       \"value\": \"h\"\n     }\n+     {\n+       \"key\": 3\n+       \"value\": \"g\"\n+     }\n   ]\n   [\n     {\n       \"key\": -2\n"
                },
                "isRoot": false,
                "uuid": "9ad22ee6-f567-41a7-9fd2-95d386ab8010",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "set key 4 with new value 'w'",
                "fullTitle": "SkipList set set key 4 with new value 'w'",
                "timedOut": false,
                "duration": 0,
                "state": "failed",
                "pass": false,
                "fail": true,
                "pending": false,
                "code": "if (_test.expected.error) {\n\t(() => list.set(..._test.args)).should.throw(_test.expected.error, {\n\t\tmessage: _test.expected.message\n\t});\n} else {\n\tlist.set(..._test.args).should.equal(_test.expected.returned);\n\tgetSubLists(list).should.deepEqual(_test.expected.lists);\n}",
                "err": {
                  "message": "AssertionError: expected Array [\n  Array [ Object { key: 1, value: 'b' } ],\n  Array [\n    Object { key: -2, value: 'x' },\n    Object { key: 0, value: 'z' },\n    Object { key: 1, value: 'b' }\n  ],\n  Array [\n    Object { key: -2, value: 'x' },\n    Object { key: 0, value: 'z' },\n    Object { key: 1, value: 'b' },\n    Object { key: 4, value: 'w' }\n  ],\n  Array [\n    Object { key: -2, value: 'x' },\n    Object { key: -1, value: 'c' },\n    Object { key: 0, value: 'z' },\n    Object { key: 0.5, value: 'd' },\n    Object { key: 1, value: 'b' },\n    Object { key: 2, value: 'f' },\n    Object { key: 2.5, value: 'h' },\n    Object { key: 2.75, value: 'y' },\n    Object { key: 3, value: 'g' },\n    Object { key: 4, value: 'w' }\n  ]\n] to equal Array [\n  Array [\n    Object { key: -2, value: 'x' },\n    Object { key: 2.5, value: 'h' }\n  ],\n  Array [\n    Object { key: -2, value: 'x' },\n    Object { key: 0, value: 'z' },\n    Object { key: 2.5, value: 'h' },\n    Object { key: 3, value: 'g' }\n  ],\n  Array [\n    Object { key: -2, value: 'x' },\n    Object { key: 0, value: 'z' },\n    Object { key: 1, value: 'b' },\n    Object { key: 2.5, value: 'h' },\n    Object { key: 3, value: 'g' }\n  ],\n  Array [\n    Object { key: -2, value: 'x' },\n    Object { key: -1, value: 'c' },\n    Object { key: 0, value: 'z' },\n    Object { key: 0.5, value: 'd' },\n    Object { key: 1, value: 'b' },\n    Object { key: 2, value: 'f' },\n    Object { key: 2.5, value: 'h' },\n    Object { key: 2.75, value: 'y' },\n    Object { key: 3, value: 'g' },\n    Object { key: 4, value: 'w' }\n  ]\n] (at '0' -> length, A has 1 and B has 2)",
                  "estack": "AssertionError: expected Array [\n  Array [ Object { key: 1, value: 'b' } ],\n  Array [\n    Object { key: -2, value: 'x' },\n    Object { key: 0, value: 'z' },\n    Object { key: 1, value: 'b' }\n  ],\n  Array [\n    Object { key: -2, value: 'x' },\n    Object { key: 0, value: 'z' },\n    Object { key: 1, value: 'b' },\n    Object { key: 4, value: 'w' }\n  ],\n  Array [\n    Object { key: -2, value: 'x' },\n    Object { key: -1, value: 'c' },\n    Object { key: 0, value: 'z' },\n    Object { key: 0.5, value: 'd' },\n    Object { key: 1, value: 'b' },\n    Object { key: 2, value: 'f' },\n    Object { key: 2.5, value: 'h' },\n    Object { key: 2.75, value: 'y' },\n    Object { key: 3, value: 'g' },\n    Object { key: 4, value: 'w' }\n  ]\n] to equal Array [\n  Array [\n    Object { key: -2, value: 'x' },\n    Object { key: 2.5, value: 'h' }\n  ],\n  Array [\n    Object { key: -2, value: 'x' },\n    Object { key: 0, value: 'z' },\n    Object { key: 2.5, value: 'h' },\n    Object { key: 3, value: 'g' }\n  ],\n  Array [\n    Object { key: -2, value: 'x' },\n    Object { key: 0, value: 'z' },\n    Object { key: 1, value: 'b' },\n    Object { key: 2.5, value: 'h' },\n    Object { key: 3, value: 'g' }\n  ],\n  Array [\n    Object { key: -2, value: 'x' },\n    Object { key: -1, value: 'c' },\n    Object { key: 0, value: 'z' },\n    Object { key: 0.5, value: 'd' },\n    Object { key: 1, value: 'b' },\n    Object { key: 2, value: 'f' },\n    Object { key: 2.5, value: 'h' },\n    Object { key: 2.75, value: 'y' },\n    Object { key: 3, value: 'g' },\n    Object { key: 4, value: 'w' }\n  ]\n] (at '0' -> length, A has 1 and B has 2)\n    at Assertion.fail (node_modules\\should\\cjs\\should.js:275:17)\n    at Assertion.value (node_modules\\should\\cjs\\should.js:356:19)\n    at Context.<anonymous> (test\\skiplist.test.js:194:31)",
                  "diff": " [\n   [\n     {\n-       \"key\": 1\n-       \"value\": \"b\"\n+       \"key\": -2\n+       \"value\": \"x\"\n     }\n+     {\n+       \"key\": 2.5\n+       \"value\": \"h\"\n+     }\n   ]\n   [\n     {\n       \"key\": -2\n       \"key\": 0\n       \"value\": \"z\"\n     }\n     {\n-       \"key\": 1\n-       \"value\": \"b\"\n+       \"key\": 2.5\n+       \"value\": \"h\"\n     }\n+     {\n+       \"key\": 3\n+       \"value\": \"g\"\n+     }\n   ]\n   [\n     {\n       \"key\": -2\n       \"key\": 1\n       \"value\": \"b\"\n     }\n     {\n-       \"key\": 4\n-       \"value\": \"w\"\n+       \"key\": 2.5\n+       \"value\": \"h\"\n     }\n+     {\n+       \"key\": 3\n+       \"value\": \"g\"\n+     }\n   ]\n   [\n     {\n       \"key\": -2\n"
                },
                "isRoot": false,
                "uuid": "2c7661da-1ec4-4235-8479-446b7d3266dd",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "2e0d7fa3-5dc6-4747-b34e-dd934b42dccb",
              "00e346bf-15c5-4b74-80fc-0ba9e68666eb",
              "9e8e26fc-3a4c-436c-a94b-707afcfa3ab2"
            ],
            "failures": [
              "d7c702d3-f0a5-451c-874a-602a64cf259c",
              "d9b09bcb-e4b5-47f4-92c7-f769a511ec71",
              "a05d6452-6b59-4fb1-a167-6545e5ff6fb5",
              "9ad22ee6-f567-41a7-9fd2-95d386ab8010",
              "2c7661da-1ec4-4235-8479-446b7d3266dd"
            ],
            "pending": [],
            "skipped": [],
            "duration": 8,
            "root": false,
            "rootEmpty": false,
            "_timeout": 2000
          },
          {
            "uuid": "7bee4de7-9ea7-42f9-aa51-638cc6ce503a",
            "title": "remove",
            "fullFile": "C:\\Users\\vpxbo\\Documents\\Github\\public-spotify-queue\\test\\skiplist.test.js",
            "file": "\\test\\skiplist.test.js",
            "beforeHooks": [],
            "afterHooks": [
              {
                "title": "\"after all\" hook",
                "fullTitle": "SkipList remove \"after all\" hook",
                "timedOut": false,
                "duration": 1,
                "pass": false,
                "fail": false,
                "pending": false,
                "code": "console.log(\"done with remove\")",
                "err": {},
                "isRoot": false,
                "uuid": "178ed3e1-fd62-4fbb-a663-01dd67c42a84",
                "isHook": true,
                "skipped": false
              }
            ],
            "tests": [
              {
                "title": "fails if key is not a number",
                "fullTitle": "SkipList remove fails if key is not a number",
                "timedOut": false,
                "duration": 2,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "if (_test.expected.error) {\n\t(() => list.remove(..._test.args)).should.throw(_test.expected.error, {\n\t\tmessage: _test.expected.message\n\t});\n} else {\n\tlist.remove(..._test.args).should.equal(_test.expected.returned);\n\tgetSubLists(list).should.deepEqual(_test.expected.lists);\n}",
                "err": {},
                "isRoot": false,
                "uuid": "e721237d-52d8-4c8f-a186-b733022c126c",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "fails if key is negative infinity",
                "fullTitle": "SkipList remove fails if key is negative infinity",
                "timedOut": false,
                "duration": 1,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "if (_test.expected.error) {\n\t(() => list.remove(..._test.args)).should.throw(_test.expected.error, {\n\t\tmessage: _test.expected.message\n\t});\n} else {\n\tlist.remove(..._test.args).should.equal(_test.expected.returned);\n\tgetSubLists(list).should.deepEqual(_test.expected.lists);\n}",
                "err": {},
                "isRoot": false,
                "uuid": "5c10c850-72d8-49fd-a362-9ef158164d2d",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "fails if key is positive infinity",
                "fullTitle": "SkipList remove fails if key is positive infinity",
                "timedOut": false,
                "duration": 1,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "if (_test.expected.error) {\n\t(() => list.remove(..._test.args)).should.throw(_test.expected.error, {\n\t\tmessage: _test.expected.message\n\t});\n} else {\n\tlist.remove(..._test.args).should.equal(_test.expected.returned);\n\tgetSubLists(list).should.deepEqual(_test.expected.lists);\n}",
                "err": {},
                "isRoot": false,
                "uuid": "9db0f0d1-f514-4e85-b287-3dd7915a9770",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "can't remove key -10",
                "fullTitle": "SkipList remove can't remove key -10",
                "timedOut": false,
                "duration": 1,
                "state": "failed",
                "pass": false,
                "fail": true,
                "pending": false,
                "code": "if (_test.expected.error) {\n\t(() => list.remove(..._test.args)).should.throw(_test.expected.error, {\n\t\tmessage: _test.expected.message\n\t});\n} else {\n\tlist.remove(..._test.args).should.equal(_test.expected.returned);\n\tgetSubLists(list).should.deepEqual(_test.expected.lists);\n}",
                "err": {
                  "message": "AssertionError: expected Array [\n  Array [ Object { key: 1, value: 'b' } ],\n  Array [\n    Object { key: -2, value: 'x' },\n    Object { key: 0, value: 'z' },\n    Object { key: 1, value: 'b' }\n  ],\n  Array [\n    Object { key: -2, value: 'x' },\n    Object { key: 0, value: 'z' },\n    Object { key: 1, value: 'b' },\n    Object { key: 4, value: 'w' }\n  ],\n  Array [\n    Object { key: -2, value: 'x' },\n    Object { key: -1, value: 'c' },\n    Object { key: 0, value: 'z' },\n    Object { key: 0.5, value: 'd' },\n    Object { key: 1, value: 'b' },\n    Object { key: 2, value: 'f' },\n    Object { key: 2.5, value: 'h' },\n    Object { key: 2.75, value: 'y' },\n    Object { key: 3, value: 'g' },\n    Object { key: 4, value: 'w' }\n  ]\n] to equal Array [\n  Array [\n    Object { key: -2, value: 'x' },\n    Object { key: 2.5, value: 'h' }\n  ],\n  Array [\n    Object { key: -2, value: 'x' },\n    Object { key: 0, value: 'z' },\n    Object { key: 2.5, value: 'h' },\n    Object { key: 3, value: 'g' }\n  ],\n  Array [\n    Object { key: -2, value: 'x' },\n    Object { key: 0, value: 'z' },\n    Object { key: 1, value: 'b' },\n    Object { key: 2.5, value: 'h' },\n    Object { key: 3, value: 'g' }\n  ],\n  Array [\n    Object { key: -2, value: 'x' },\n    Object { key: -1, value: 'c' },\n    Object { key: 0, value: 'z' },\n    Object { key: 0.5, value: 'd' },\n    Object { key: 1, value: 'b' },\n    Object { key: 2, value: 'f' },\n    Object { key: 2.5, value: 'h' },\n    Object { key: 2.75, value: 'y' },\n    Object { key: 3, value: 'g' },\n    Object { key: 4, value: 'w' }\n  ]\n] (at '0' -> length, A has 1 and B has 2)",
                  "estack": "AssertionError: expected Array [\n  Array [ Object { key: 1, value: 'b' } ],\n  Array [\n    Object { key: -2, value: 'x' },\n    Object { key: 0, value: 'z' },\n    Object { key: 1, value: 'b' }\n  ],\n  Array [\n    Object { key: -2, value: 'x' },\n    Object { key: 0, value: 'z' },\n    Object { key: 1, value: 'b' },\n    Object { key: 4, value: 'w' }\n  ],\n  Array [\n    Object { key: -2, value: 'x' },\n    Object { key: -1, value: 'c' },\n    Object { key: 0, value: 'z' },\n    Object { key: 0.5, value: 'd' },\n    Object { key: 1, value: 'b' },\n    Object { key: 2, value: 'f' },\n    Object { key: 2.5, value: 'h' },\n    Object { key: 2.75, value: 'y' },\n    Object { key: 3, value: 'g' },\n    Object { key: 4, value: 'w' }\n  ]\n] to equal Array [\n  Array [\n    Object { key: -2, value: 'x' },\n    Object { key: 2.5, value: 'h' }\n  ],\n  Array [\n    Object { key: -2, value: 'x' },\n    Object { key: 0, value: 'z' },\n    Object { key: 2.5, value: 'h' },\n    Object { key: 3, value: 'g' }\n  ],\n  Array [\n    Object { key: -2, value: 'x' },\n    Object { key: 0, value: 'z' },\n    Object { key: 1, value: 'b' },\n    Object { key: 2.5, value: 'h' },\n    Object { key: 3, value: 'g' }\n  ],\n  Array [\n    Object { key: -2, value: 'x' },\n    Object { key: -1, value: 'c' },\n    Object { key: 0, value: 'z' },\n    Object { key: 0.5, value: 'd' },\n    Object { key: 1, value: 'b' },\n    Object { key: 2, value: 'f' },\n    Object { key: 2.5, value: 'h' },\n    Object { key: 2.75, value: 'y' },\n    Object { key: 3, value: 'g' },\n    Object { key: 4, value: 'w' }\n  ]\n] (at '0' -> length, A has 1 and B has 2)\n    at Assertion.fail (node_modules\\should\\cjs\\should.js:275:17)\n    at Assertion.value (node_modules\\should\\cjs\\should.js:356:19)\n    at Context.<anonymous> (test\\skiplist.test.js:213:31)",
                  "diff": " [\n   [\n     {\n-       \"key\": 1\n-       \"value\": \"b\"\n+       \"key\": -2\n+       \"value\": \"x\"\n     }\n+     {\n+       \"key\": 2.5\n+       \"value\": \"h\"\n+     }\n   ]\n   [\n     {\n       \"key\": -2\n       \"key\": 0\n       \"value\": \"z\"\n     }\n     {\n-       \"key\": 1\n-       \"value\": \"b\"\n+       \"key\": 2.5\n+       \"value\": \"h\"\n     }\n+     {\n+       \"key\": 3\n+       \"value\": \"g\"\n+     }\n   ]\n   [\n     {\n       \"key\": -2\n       \"key\": 1\n       \"value\": \"b\"\n     }\n     {\n-       \"key\": 4\n-       \"value\": \"w\"\n+       \"key\": 2.5\n+       \"value\": \"h\"\n     }\n+     {\n+       \"key\": 3\n+       \"value\": \"g\"\n+     }\n   ]\n   [\n     {\n       \"key\": -2\n"
                },
                "isRoot": false,
                "uuid": "a9600746-6226-4fb5-b402-04ab82e800b6",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "remove key 0",
                "fullTitle": "SkipList remove remove key 0",
                "timedOut": false,
                "duration": 2,
                "state": "failed",
                "pass": false,
                "fail": true,
                "pending": false,
                "code": "if (_test.expected.error) {\n\t(() => list.remove(..._test.args)).should.throw(_test.expected.error, {\n\t\tmessage: _test.expected.message\n\t});\n} else {\n\tlist.remove(..._test.args).should.equal(_test.expected.returned);\n\tgetSubLists(list).should.deepEqual(_test.expected.lists);\n}",
                "err": {
                  "message": "AssertionError: expected Array [\n  Array [ Object { key: 1, value: 'b' } ],\n  Array [ Object { key: -2, value: 'x' }, Object { key: 1, value: 'b' } ],\n  Array [\n    Object { key: -2, value: 'x' },\n    Object { key: 1, value: 'b' },\n    Object { key: 4, value: 'w' }\n  ],\n  Array [\n    Object { key: -2, value: 'x' },\n    Object { key: -1, value: 'c' },\n    Object { key: 0.5, value: 'd' },\n    Object { key: 1, value: 'b' },\n    Object { key: 2, value: 'f' },\n    Object { key: 2.5, value: 'h' },\n    Object { key: 2.75, value: 'y' },\n    Object { key: 3, value: 'g' },\n    Object { key: 4, value: 'w' }\n  ]\n] to equal Array [\n  Array [\n    Object { key: -2, value: 'x' },\n    Object { key: 2.5, value: 'h' }\n  ],\n  Array [\n    Object { key: -2, value: 'x' },\n    Object { key: 2.5, value: 'h' },\n    Object { key: 3, value: 'g' }\n  ],\n  Array [\n    Object { key: -2, value: 'x' },\n    Object { key: 1, value: 'b' },\n    Object { key: 2.5, value: 'h' },\n    Object { key: 3, value: 'g' }\n  ],\n  Array [\n    Object { key: -2, value: 'x' },\n    Object { key: -1, value: 'c' },\n    Object { key: 0.5, value: 'd' },\n    Object { key: 1, value: 'b' },\n    Object { key: 2, value: 'f' },\n    Object { key: 2.5, value: 'h' },\n    Object { key: 2.75, value: 'y' },\n    Object { key: 3, value: 'g' },\n    Object { key: 4, value: 'w' }\n  ]\n] (at '0' -> length, A has 1 and B has 2)",
                  "estack": "AssertionError: expected Array [\n  Array [ Object { key: 1, value: 'b' } ],\n  Array [ Object { key: -2, value: 'x' }, Object { key: 1, value: 'b' } ],\n  Array [\n    Object { key: -2, value: 'x' },\n    Object { key: 1, value: 'b' },\n    Object { key: 4, value: 'w' }\n  ],\n  Array [\n    Object { key: -2, value: 'x' },\n    Object { key: -1, value: 'c' },\n    Object { key: 0.5, value: 'd' },\n    Object { key: 1, value: 'b' },\n    Object { key: 2, value: 'f' },\n    Object { key: 2.5, value: 'h' },\n    Object { key: 2.75, value: 'y' },\n    Object { key: 3, value: 'g' },\n    Object { key: 4, value: 'w' }\n  ]\n] to equal Array [\n  Array [\n    Object { key: -2, value: 'x' },\n    Object { key: 2.5, value: 'h' }\n  ],\n  Array [\n    Object { key: -2, value: 'x' },\n    Object { key: 2.5, value: 'h' },\n    Object { key: 3, value: 'g' }\n  ],\n  Array [\n    Object { key: -2, value: 'x' },\n    Object { key: 1, value: 'b' },\n    Object { key: 2.5, value: 'h' },\n    Object { key: 3, value: 'g' }\n  ],\n  Array [\n    Object { key: -2, value: 'x' },\n    Object { key: -1, value: 'c' },\n    Object { key: 0.5, value: 'd' },\n    Object { key: 1, value: 'b' },\n    Object { key: 2, value: 'f' },\n    Object { key: 2.5, value: 'h' },\n    Object { key: 2.75, value: 'y' },\n    Object { key: 3, value: 'g' },\n    Object { key: 4, value: 'w' }\n  ]\n] (at '0' -> length, A has 1 and B has 2)\n    at Assertion.fail (node_modules\\should\\cjs\\should.js:275:17)\n    at Assertion.value (node_modules\\should\\cjs\\should.js:356:19)\n    at Context.<anonymous> (test\\skiplist.test.js:213:31)",
                  "diff": " [\n   [\n     {\n-       \"key\": 1\n-       \"value\": \"b\"\n+       \"key\": -2\n+       \"value\": \"x\"\n     }\n+     {\n+       \"key\": 2.5\n+       \"value\": \"h\"\n+     }\n   ]\n   [\n     {\n       \"key\": -2\n       \"value\": \"x\"\n     }\n     {\n-       \"key\": 1\n-       \"value\": \"b\"\n+       \"key\": 2.5\n+       \"value\": \"h\"\n     }\n+     {\n+       \"key\": 3\n+       \"value\": \"g\"\n+     }\n   ]\n   [\n     {\n       \"key\": -2\n       \"key\": 1\n       \"value\": \"b\"\n     }\n     {\n-       \"key\": 4\n-       \"value\": \"w\"\n+       \"key\": 2.5\n+       \"value\": \"h\"\n     }\n+     {\n+       \"key\": 3\n+       \"value\": \"g\"\n+     }\n   ]\n   [\n     {\n       \"key\": -2\n"
                },
                "isRoot": false,
                "uuid": "48192c6f-6f3b-4de1-b771-6d718460b0ef",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "remove key 4",
                "fullTitle": "SkipList remove remove key 4",
                "timedOut": false,
                "duration": 1,
                "state": "failed",
                "pass": false,
                "fail": true,
                "pending": false,
                "code": "if (_test.expected.error) {\n\t(() => list.remove(..._test.args)).should.throw(_test.expected.error, {\n\t\tmessage: _test.expected.message\n\t});\n} else {\n\tlist.remove(..._test.args).should.equal(_test.expected.returned);\n\tgetSubLists(list).should.deepEqual(_test.expected.lists);\n}",
                "err": {
                  "message": "AssertionError: expected Array [\n  Array [ Object { key: 1, value: 'b' } ],\n  Array [ Object { key: -2, value: 'x' }, Object { key: 1, value: 'b' } ],\n  Array [ Object { key: -2, value: 'x' }, Object { key: 1, value: 'b' } ],\n  Array [\n    Object { key: -2, value: 'x' },\n    Object { key: -1, value: 'c' },\n    Object { key: 0.5, value: 'd' },\n    Object { key: 1, value: 'b' },\n    Object { key: 2, value: 'f' },\n    Object { key: 2.5, value: 'h' },\n    Object { key: 2.75, value: 'y' },\n    Object { key: 3, value: 'g' }\n  ]\n] to equal Array [\n  Array [\n    Object { key: -2, value: 'x' },\n    Object { key: 2.5, value: 'h' }\n  ],\n  Array [\n    Object { key: -2, value: 'x' },\n    Object { key: 2.5, value: 'h' },\n    Object { key: 3, value: 'g' }\n  ],\n  Array [\n    Object { key: -2, value: 'x' },\n    Object { key: 1, value: 'b' },\n    Object { key: 2.5, value: 'h' },\n    Object { key: 3, value: 'g' }\n  ],\n  Array [\n    Object { key: -2, value: 'x' },\n    Object { key: -1, value: 'c' },\n    Object { key: 0.5, value: 'd' },\n    Object { key: 1, value: 'b' },\n    Object { key: 2, value: 'f' },\n    Object { key: 2.5, value: 'h' },\n    Object { key: 2.75, value: 'y' },\n    Object { key: 3, value: 'g' }\n  ]\n] (at '0' -> length, A has 1 and B has 2)",
                  "estack": "AssertionError: expected Array [\n  Array [ Object { key: 1, value: 'b' } ],\n  Array [ Object { key: -2, value: 'x' }, Object { key: 1, value: 'b' } ],\n  Array [ Object { key: -2, value: 'x' }, Object { key: 1, value: 'b' } ],\n  Array [\n    Object { key: -2, value: 'x' },\n    Object { key: -1, value: 'c' },\n    Object { key: 0.5, value: 'd' },\n    Object { key: 1, value: 'b' },\n    Object { key: 2, value: 'f' },\n    Object { key: 2.5, value: 'h' },\n    Object { key: 2.75, value: 'y' },\n    Object { key: 3, value: 'g' }\n  ]\n] to equal Array [\n  Array [\n    Object { key: -2, value: 'x' },\n    Object { key: 2.5, value: 'h' }\n  ],\n  Array [\n    Object { key: -2, value: 'x' },\n    Object { key: 2.5, value: 'h' },\n    Object { key: 3, value: 'g' }\n  ],\n  Array [\n    Object { key: -2, value: 'x' },\n    Object { key: 1, value: 'b' },\n    Object { key: 2.5, value: 'h' },\n    Object { key: 3, value: 'g' }\n  ],\n  Array [\n    Object { key: -2, value: 'x' },\n    Object { key: -1, value: 'c' },\n    Object { key: 0.5, value: 'd' },\n    Object { key: 1, value: 'b' },\n    Object { key: 2, value: 'f' },\n    Object { key: 2.5, value: 'h' },\n    Object { key: 2.75, value: 'y' },\n    Object { key: 3, value: 'g' }\n  ]\n] (at '0' -> length, A has 1 and B has 2)\n    at Assertion.fail (node_modules\\should\\cjs\\should.js:275:17)\n    at Assertion.value (node_modules\\should\\cjs\\should.js:356:19)\n    at Context.<anonymous> (test\\skiplist.test.js:213:31)",
                  "diff": " [\n   [\n     {\n-       \"key\": 1\n-       \"value\": \"b\"\n+       \"key\": -2\n+       \"value\": \"x\"\n     }\n+     {\n+       \"key\": 2.5\n+       \"value\": \"h\"\n+     }\n   ]\n   [\n     {\n       \"key\": -2\n       \"value\": \"x\"\n     }\n     {\n-       \"key\": 1\n-       \"value\": \"b\"\n+       \"key\": 2.5\n+       \"value\": \"h\"\n     }\n+     {\n+       \"key\": 3\n+       \"value\": \"g\"\n+     }\n   ]\n   [\n     {\n       \"key\": -2\n     {\n       \"key\": 1\n       \"value\": \"b\"\n     }\n+     {\n+       \"key\": 2.5\n+       \"value\": \"h\"\n+     }\n+     {\n+       \"key\": 3\n+       \"value\": \"g\"\n+     }\n   ]\n   [\n     {\n       \"key\": -2\n"
                },
                "isRoot": false,
                "uuid": "38db71cf-3b9f-488b-b993-d7672736eeec",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "remove key -2",
                "fullTitle": "SkipList remove remove key -2",
                "timedOut": false,
                "duration": 1,
                "state": "failed",
                "pass": false,
                "fail": true,
                "pending": false,
                "code": "if (_test.expected.error) {\n\t(() => list.remove(..._test.args)).should.throw(_test.expected.error, {\n\t\tmessage: _test.expected.message\n\t});\n} else {\n\tlist.remove(..._test.args).should.equal(_test.expected.returned);\n\tgetSubLists(list).should.deepEqual(_test.expected.lists);\n}",
                "err": {
                  "message": "AssertionError: expected Array [\n  Array [ Object { key: 1, value: 'b' } ],\n  Array [ Object { key: 1, value: 'b' } ],\n  Array [ Object { key: 1, value: 'b' } ],\n  Array [\n    Object { key: -1, value: 'c' },\n    Object { key: 0.5, value: 'd' },\n    Object { key: 1, value: 'b' },\n    Object { key: 2, value: 'f' },\n    Object { key: 2.5, value: 'h' },\n    Object { key: 2.75, value: 'y' },\n    Object { key: 3, value: 'g' }\n  ]\n] to equal Array [\n  Array [ Object { key: 2.5, value: 'h' } ],\n  Array [ Object { key: 2.5, value: 'h' }, Object { key: 3, value: 'g' } ],\n  Array [\n    Object { key: 1, value: 'b' },\n    Object { key: 2.5, value: 'h' },\n    Object { key: 3, value: 'g' }\n  ],\n  Array [\n    Object { key: -1, value: 'c' },\n    Object { key: 0.5, value: 'd' },\n    Object { key: 1, value: 'b' },\n    Object { key: 2, value: 'f' },\n    Object { key: 2.5, value: 'h' },\n    Object { key: 2.75, value: 'y' },\n    Object { key: 3, value: 'g' }\n  ]\n] (at '0' -> '0' -> key, A has 1 and B has 2.5)",
                  "estack": "AssertionError: expected Array [\n  Array [ Object { key: 1, value: 'b' } ],\n  Array [ Object { key: 1, value: 'b' } ],\n  Array [ Object { key: 1, value: 'b' } ],\n  Array [\n    Object { key: -1, value: 'c' },\n    Object { key: 0.5, value: 'd' },\n    Object { key: 1, value: 'b' },\n    Object { key: 2, value: 'f' },\n    Object { key: 2.5, value: 'h' },\n    Object { key: 2.75, value: 'y' },\n    Object { key: 3, value: 'g' }\n  ]\n] to equal Array [\n  Array [ Object { key: 2.5, value: 'h' } ],\n  Array [ Object { key: 2.5, value: 'h' }, Object { key: 3, value: 'g' } ],\n  Array [\n    Object { key: 1, value: 'b' },\n    Object { key: 2.5, value: 'h' },\n    Object { key: 3, value: 'g' }\n  ],\n  Array [\n    Object { key: -1, value: 'c' },\n    Object { key: 0.5, value: 'd' },\n    Object { key: 1, value: 'b' },\n    Object { key: 2, value: 'f' },\n    Object { key: 2.5, value: 'h' },\n    Object { key: 2.75, value: 'y' },\n    Object { key: 3, value: 'g' }\n  ]\n] (at '0' -> '0' -> key, A has 1 and B has 2.5)\n    at Assertion.fail (node_modules\\should\\cjs\\should.js:275:17)\n    at Assertion.value (node_modules\\should\\cjs\\should.js:356:19)\n    at Context.<anonymous> (test\\skiplist.test.js:213:31)",
                  "diff": " [\n   [\n     {\n-       \"key\": 1\n-       \"value\": \"b\"\n+       \"key\": 2.5\n+       \"value\": \"h\"\n     }\n   ]\n   [\n     {\n-       \"key\": 1\n-       \"value\": \"b\"\n+       \"key\": 2.5\n+       \"value\": \"h\"\n     }\n+     {\n+       \"key\": 3\n+       \"value\": \"g\"\n+     }\n   ]\n   [\n     {\n       \"key\": 1\n       \"value\": \"b\"\n     }\n+     {\n+       \"key\": 2.5\n+       \"value\": \"h\"\n+     }\n+     {\n+       \"key\": 3\n+       \"value\": \"g\"\n+     }\n   ]\n   [\n     {\n       \"key\": -1\n"
                },
                "isRoot": false,
                "uuid": "43ef5707-b574-4f4f-ab94-5aad9b3050ac",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "remove key 2.5",
                "fullTitle": "SkipList remove remove key 2.5",
                "timedOut": false,
                "duration": 1,
                "state": "failed",
                "pass": false,
                "fail": true,
                "pending": false,
                "code": "if (_test.expected.error) {\n\t(() => list.remove(..._test.args)).should.throw(_test.expected.error, {\n\t\tmessage: _test.expected.message\n\t});\n} else {\n\tlist.remove(..._test.args).should.equal(_test.expected.returned);\n\tgetSubLists(list).should.deepEqual(_test.expected.lists);\n}",
                "err": {
                  "message": "AssertionError: expected Array [\n  Array [ Object { key: 1, value: 'b' } ],\n  Array [ Object { key: 1, value: 'b' } ],\n  Array [ Object { key: 1, value: 'b' } ],\n  Array [\n    Object { key: -1, value: 'c' },\n    Object { key: 0.5, value: 'd' },\n    Object { key: 1, value: 'b' },\n    Object { key: 2, value: 'f' },\n    Object { key: 2.75, value: 'y' },\n    Object { key: 3, value: 'g' }\n  ]\n] to equal Array [\n  Array [ Object { key: 3, value: 'g' } ],\n  Array [ Object { key: 1, value: 'b' }, Object { key: 3, value: 'g' } ],\n  Array [\n    Object { key: -1, value: 'c' },\n    Object { key: 0.5, value: 'd' },\n    Object { key: 1, value: 'b' },\n    Object { key: 2, value: 'f' },\n    Object { key: 2.75, value: 'y' },\n    Object { key: 3, value: 'g' }\n  ]\n] (at length, A has 4 and B has 3)",
                  "estack": "AssertionError: expected Array [\n  Array [ Object { key: 1, value: 'b' } ],\n  Array [ Object { key: 1, value: 'b' } ],\n  Array [ Object { key: 1, value: 'b' } ],\n  Array [\n    Object { key: -1, value: 'c' },\n    Object { key: 0.5, value: 'd' },\n    Object { key: 1, value: 'b' },\n    Object { key: 2, value: 'f' },\n    Object { key: 2.75, value: 'y' },\n    Object { key: 3, value: 'g' }\n  ]\n] to equal Array [\n  Array [ Object { key: 3, value: 'g' } ],\n  Array [ Object { key: 1, value: 'b' }, Object { key: 3, value: 'g' } ],\n  Array [\n    Object { key: -1, value: 'c' },\n    Object { key: 0.5, value: 'd' },\n    Object { key: 1, value: 'b' },\n    Object { key: 2, value: 'f' },\n    Object { key: 2.75, value: 'y' },\n    Object { key: 3, value: 'g' }\n  ]\n] (at length, A has 4 and B has 3)\n    at Assertion.fail (node_modules\\should\\cjs\\should.js:275:17)\n    at Assertion.value (node_modules\\should\\cjs\\should.js:356:19)\n    at Context.<anonymous> (test\\skiplist.test.js:213:31)",
                  "diff": " [\n   [\n     {\n-       \"key\": 1\n-       \"value\": \"b\"\n+       \"key\": 3\n+       \"value\": \"g\"\n     }\n   ]\n   [\n     {\n       \"key\": 1\n       \"value\": \"b\"\n     }\n-   ]\n-   [\n     {\n-       \"key\": 1\n-       \"value\": \"b\"\n+       \"key\": 3\n+       \"value\": \"g\"\n     }\n   ]\n   [\n     {\n"
                },
                "isRoot": false,
                "uuid": "b6891992-71cb-46bc-a32b-5e7c66ffa661",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "can't remove key 0 again (no double remove)",
                "fullTitle": "SkipList remove can't remove key 0 again (no double remove)",
                "timedOut": false,
                "duration": 0,
                "state": "failed",
                "pass": false,
                "fail": true,
                "pending": false,
                "code": "if (_test.expected.error) {\n\t(() => list.remove(..._test.args)).should.throw(_test.expected.error, {\n\t\tmessage: _test.expected.message\n\t});\n} else {\n\tlist.remove(..._test.args).should.equal(_test.expected.returned);\n\tgetSubLists(list).should.deepEqual(_test.expected.lists);\n}",
                "err": {
                  "message": "AssertionError: expected Array [\n  Array [ Object { key: 1, value: 'b' } ],\n  Array [ Object { key: 1, value: 'b' } ],\n  Array [ Object { key: 1, value: 'b' } ],\n  Array [\n    Object { key: -1, value: 'c' },\n    Object { key: 0.5, value: 'd' },\n    Object { key: 1, value: 'b' },\n    Object { key: 2, value: 'f' },\n    Object { key: 2.75, value: 'y' },\n    Object { key: 3, value: 'g' }\n  ]\n] to equal Array [\n  Array [ Object { key: 3, value: 'g' } ],\n  Array [ Object { key: 1, value: 'b' }, Object { key: 3, value: 'g' } ],\n  Array [\n    Object { key: -1, value: 'c' },\n    Object { key: 0.5, value: 'd' },\n    Object { key: 1, value: 'b' },\n    Object { key: 2, value: 'f' },\n    Object { key: 2.75, value: 'y' },\n    Object { key: 3, value: 'g' }\n  ]\n] (at length, A has 4 and B has 3)",
                  "estack": "AssertionError: expected Array [\n  Array [ Object { key: 1, value: 'b' } ],\n  Array [ Object { key: 1, value: 'b' } ],\n  Array [ Object { key: 1, value: 'b' } ],\n  Array [\n    Object { key: -1, value: 'c' },\n    Object { key: 0.5, value: 'd' },\n    Object { key: 1, value: 'b' },\n    Object { key: 2, value: 'f' },\n    Object { key: 2.75, value: 'y' },\n    Object { key: 3, value: 'g' }\n  ]\n] to equal Array [\n  Array [ Object { key: 3, value: 'g' } ],\n  Array [ Object { key: 1, value: 'b' }, Object { key: 3, value: 'g' } ],\n  Array [\n    Object { key: -1, value: 'c' },\n    Object { key: 0.5, value: 'd' },\n    Object { key: 1, value: 'b' },\n    Object { key: 2, value: 'f' },\n    Object { key: 2.75, value: 'y' },\n    Object { key: 3, value: 'g' }\n  ]\n] (at length, A has 4 and B has 3)\n    at Assertion.fail (node_modules\\should\\cjs\\should.js:275:17)\n    at Assertion.value (node_modules\\should\\cjs\\should.js:356:19)\n    at Context.<anonymous> (test\\skiplist.test.js:213:31)",
                  "diff": " [\n   [\n     {\n-       \"key\": 1\n-       \"value\": \"b\"\n+       \"key\": 3\n+       \"value\": \"g\"\n     }\n   ]\n   [\n     {\n       \"key\": 1\n       \"value\": \"b\"\n     }\n-   ]\n-   [\n     {\n-       \"key\": 1\n-       \"value\": \"b\"\n+       \"key\": 3\n+       \"value\": \"g\"\n     }\n   ]\n   [\n     {\n"
                },
                "isRoot": false,
                "uuid": "48fd3eb8-dfb6-4d54-a029-a0f3cdcedba5",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "e721237d-52d8-4c8f-a186-b733022c126c",
              "5c10c850-72d8-49fd-a362-9ef158164d2d",
              "9db0f0d1-f514-4e85-b287-3dd7915a9770"
            ],
            "failures": [
              "a9600746-6226-4fb5-b402-04ab82e800b6",
              "48192c6f-6f3b-4de1-b771-6d718460b0ef",
              "38db71cf-3b9f-488b-b993-d7672736eeec",
              "43ef5707-b574-4f4f-ab94-5aad9b3050ac",
              "b6891992-71cb-46bc-a32b-5e7c66ffa661",
              "48fd3eb8-dfb6-4d54-a029-a0f3cdcedba5"
            ],
            "pending": [],
            "skipped": [],
            "duration": 10,
            "root": false,
            "rootEmpty": false,
            "_timeout": 2000
          }
        ],
        "passes": [],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 0,
        "root": false,
        "rootEmpty": false,
        "_timeout": 2000
      }
    ],
    "passes": [],
    "failures": [],
    "pending": [],
    "skipped": [],
    "duration": 0,
    "root": true,
    "rootEmpty": true,
    "_timeout": 2000
  },
  "copyrightYear": 2018
}